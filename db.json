{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/模版设计模式UML.png","path":"img/模版设计模式UML.png","modified":0,"renderable":0},{"_id":"source/img/hexo设置.png","path":"img/hexo设置.png","modified":0,"renderable":0},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/img/设计模式-原型Prototype/UML_Prototype.mdj","path":"img/设计模式-原型Prototype/UML_Prototype.mdj","modified":0,"renderable":0},{"_id":"source/img/创建账号.jpg","path":"img/创建账号.jpg","modified":0,"renderable":0},{"_id":"source/img/设计模式-原型Prototype/UML.png","path":"img/设计模式-原型Prototype/UML.png","modified":0,"renderable":0},{"_id":"source/img/设置pages.png","path":"img/设置pages.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.JPG","path":"images/avatar.JPG","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/img/blog-表格/blog-表格-页面.png","path":"img/blog-表格/blog-表格-页面.png","modified":0,"renderable":0},{"_id":"source/img/设计模式-适配器Adapter/UML.png","path":"img/设计模式-适配器Adapter/UML.png","modified":0,"renderable":0},{"_id":"source/img/java CAS原理/物理机结构.jpg","path":"img/java CAS原理/物理机结构.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/IMG_0001.JPG","path":"images/IMG_0001.JPG","modified":0,"renderable":1},{"_id":"source/img/blog-表格/blog-表格-md源码.png","path":"img/blog-表格/blog-表格-md源码.png","modified":0,"renderable":0},{"_id":"source/img/blog-表格/blog-表格-正确.png","path":"img/blog-表格/blog-表格-正确.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"source/img/blog-表格/blog-表格-正确md源码.png","path":"img/blog-表格/blog-表格-正确md源码.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"source/img/blog-表格/blog-表格-html源码.png","path":"img/blog-表格/blog-表格-html源码.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"source/2018/06/09/设计模式-模版【Tempalte Method】/img/模版设计模式UML.png","path":"2018/06/09/设计模式-模版【Tempalte Method】/img/模版设计模式UML.png","modified":0,"renderable":0},{"_id":"source/2018/06/03/Hexo、Github搭建Blog/img/hexo设置.png","path":"2018/06/03/Hexo、Github搭建Blog/img/hexo设置.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"source/2018/06/09/设计模式-模版【Tempalte Method】/img/设计模式-模版方法Template/模版设计模式UML.png","path":"2018/06/09/设计模式-模版【Tempalte Method】/img/设计模式-模版方法Template/模版设计模式UML.png","modified":0,"renderable":0},{"_id":"source/2018/06/03/Hexo、Github搭建Blog/img/设置pages.png","path":"2018/06/03/Hexo、Github搭建Blog/img/设置pages.png","modified":0,"renderable":0},{"_id":"source/2018/08/04/设计模式-原型【Prototype】/img/设计模式-原型Prototype/UML.png","path":"2018/08/04/设计模式-原型【Prototype】/img/设计模式-原型Prototype/UML.png","modified":0,"renderable":0},{"_id":"source/2018/06/03/Hexo、Github搭建Blog/img/创建账号.jpg","path":"2018/06/03/Hexo、Github搭建Blog/img/创建账号.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"source/2018/07/07/blog-表格/img/blog-表格/blog-表格-页面.png","path":"2018/07/07/blog-表格/img/blog-表格/blog-表格-页面.png","modified":0,"renderable":0},{"_id":"source/2018/08/12/设计模式-适配器【Adapter】/img/设计模式-适配器Adapter/UML.png","path":"2018/08/12/设计模式-适配器【Adapter】/img/设计模式-适配器Adapter/UML.png","modified":0,"renderable":0},{"_id":"source/2018/08/07/设计模式-适配器【Adapter】/img/设计模式-适配器Adapter/UML.png","path":"2018/08/07/设计模式-适配器【Adapter】/img/设计模式-适配器Adapter/UML.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"source/2018/07/07/blog-表格/img/blog-表格/blog-表格-md源码.png","path":"2018/07/07/blog-表格/img/blog-表格/blog-表格-md源码.png","modified":0,"renderable":0},{"_id":"source/2018/07/07/blog-表格/img/blog-表格/blog-表格-正确.png","path":"2018/07/07/blog-表格/img/blog-表格/blog-表格-正确.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/2018/07/07/blog-表格/img/blog-表格/blog-表格-正确md源码.png","path":"2018/07/07/blog-表格/img/blog-表格/blog-表格-正确md源码.png","modified":0,"renderable":0},{"_id":"source/2018/07/07/blog-表格/img/blog-表格/blog-表格-html源码.png","path":"2018/07/07/blog-表格/img/blog-表格/blog-表格-html源码.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"62d80a3cf073955d35c5fa2001a780ed475ffe9a","modified":1534048671000},{"_id":"source/favicon.ico","hash":"a2e77dbcc4d4261d3da14452d62509cf5c82682a","modified":1534046693000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1528096936000},{"_id":"themes/next/.DS_Store","hash":"ed1885362c710dfd734e9de9787cd4ca5497274e","modified":1528096936000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1528096936000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1528096936000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1528096936000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1528096936000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1528096936000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1528096936000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1528096936000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1528096936000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1528096936000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1528096936000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1528096936000},{"_id":"themes/next/_config.yml","hash":"6f2ba2008f2fe4dd6d59f709f6b60d10dcecf87f","modified":1533179798000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1528096936000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1528096936000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1528096936000},{"_id":"source/2018/.DS_Store","hash":"d226c45229cfbd074b11ced2abcb5a5db7fdda58","modified":1534059298000},{"_id":"source/_posts/.DS_Store","hash":"da4adac2798c46ed3897cf109e0e20a5da207db4","modified":1534048738000},{"_id":"source/_posts/Hexo、Github搭建Blog-站内搜索.md","hash":"320f0bcfeb3148c568c1124031330cd0e82ef2b4","modified":1534046693000},{"_id":"source/_posts/Hexo、Github搭建Blog.md","hash":"ac26b37a3b86f041351388c15b7dee602c80fd70","modified":1534046693000},{"_id":"source/_posts/blog-表格.md","hash":"f858c899050da36c0e3d8d69af6bc8a418b8002a","modified":1534046693000},{"_id":"source/_posts/happen-before.md","hash":"8011dee1388ebc1ba522f64763035c50e7f82118","modified":1534045860000},{"_id":"source/_posts/hello-world.md","hash":"3240e9370271b28c910f60647bc0c0f2dd12a07b","modified":1534049445000},{"_id":"source/_posts/java-8-stream.md","hash":"10f3c35b267d174b99e942b51e062f99898aea4a","modified":1534046693000},{"_id":"source/_posts/java-CAS原理.md","hash":"a4f5fcc4bd9dde311d4415cfa391254b3b6dab57","modified":1534049656000},{"_id":"source/_posts/jvm工具-greys.md","hash":"c0f181b85aa07879640a33a9f9bf42f9f3c09a3d","modified":1534049653000},{"_id":"source/_posts/volatile关键字.md","hash":"e73bc3eb5a1c097e06da0061807f53e75d41e335","modified":1534049774000},{"_id":"source/_posts/设计模式-原型【Prototype】.md","hash":"9160f56b1f702897d3814d15547038db0029624a","modified":1534046693000},{"_id":"source/_posts/设计模式-模版【Tempalte Method】.md","hash":"30fb78ecf17d242defdb4e7434e68e1130878e01","modified":1534046693000},{"_id":"source/_posts/逃逸分析和栈上分配.md","hash":"711a2be4ec07807ac54ebbfd174f46cf85107657","modified":1534045825000},{"_id":"source/categories/index.md","hash":"ae4d15155d55ea87d0eba02c11458e2850d0288f","modified":1534046693000},{"_id":"source/_posts/设计模式-适配器【Adapter】.md","hash":"7fe4d50ac8da87d6237a3dac85aef14f51958275","modified":1534060602000},{"_id":"source/img/.DS_Store","hash":"459beb76b5f3ec5cca318ce794d95b0983c33a37","modified":1534057405000},{"_id":"source/tags/index.md","hash":"ddcd874b6e87c66e83af507c2663533fab9af6a3","modified":1534046693000},{"_id":"source/img/favicon.ico","hash":"a2e77dbcc4d4261d3da14452d62509cf5c82682a","modified":1534046693000},{"_id":"source/img/模版设计模式UML.png","hash":"39637af921a5251af0642f51066a2f1568aefbb9","modified":1534046693000},{"_id":"source/img/hexo设置.png","hash":"4e63e6df55855456756d8b43d7cbff4fae601556","modified":1534046693000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1528096935000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1528096935000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1528096935000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1528096935000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1528096935000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1528096935000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1528096935000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1528096935000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1528096935000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1528096935000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1528096935000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1528096935000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1528096935000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1528096935000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1528096935000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1528096935000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1528096935000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1528096935000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1528096935000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1528096935000},{"_id":"themes/next/layout/_layout.swig","hash":"bff3fbe7573556b6a24185087e01958414e3bbe5","modified":1528096935000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1528096935000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1528096935000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1528096935000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1528096935000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1528096935000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1528096935000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1528096935000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1528096935000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1528096935000},{"_id":"themes/next/source/favicon.ico","hash":"a2e77dbcc4d4261d3da14452d62509cf5c82682a","modified":1528096935000},{"_id":"themes/next/source/.DS_Store","hash":"aa9f2f8bb07384965b0f637a11c2549e76dfdb0c","modified":1528096935000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1528096936000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1528096936000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1528096936000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528096935000},{"_id":"source/2018/07/.DS_Store","hash":"ba82ba967fb7670886583eee7b90ae7f39812f78","modified":1534046693000},{"_id":"source/2018/08/.DS_Store","hash":"7162fe654be07fb33db621be838ad7e2520660ee","modified":1534059708000},{"_id":"source/2018/06/.DS_Store","hash":"0c115ed418cc469eecd151986c022c07bc230379","modified":1534046693000},{"_id":"source/img/blog-表格/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1534046693000},{"_id":"source/img/设计模式-原型Prototype/UML_Prototype.mdj","hash":"a95b48139700df959aa3f3449a726af10a342cf3","modified":1534046693000},{"_id":"source/img/创建账号.jpg","hash":"19e55caf5806cb68ff22bb93b783fdf39e2af553","modified":1534046693000},{"_id":"source/img/设计模式-原型Prototype/UML.png","hash":"a37277e7fb19bc5ee21823f7aadab9123b545130","modified":1534046693000},{"_id":"source/img/设置pages.png","hash":"34b838a6cd3ae611ff7829cb01a23e267436b17b","modified":1534046693000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1528096935000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1528096935000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1528096935000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1528096935000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1528096935000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1528096935000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1528096935000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1528096935000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1528096935000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1528096935000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1528096935000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1528096935000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1528096935000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1528096935000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1528096935000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1528096935000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1528096935000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1528096935000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1528096935000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1528096935000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1528096935000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1528096935000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1528096935000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1528096935000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1528096935000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1528096935000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1528096935000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1528096935000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1528096935000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1528096935000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1528096935000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1528096935000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1528096935000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1528096935000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1528096935000},{"_id":"themes/next/source/images/.DS_Store","hash":"20fcd75c26b3b623bba63261f15d36c456dd9729","modified":1528096935000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1528096935000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1528096935000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1528096935000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1528096935000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1528096935000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1528096935000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1528096935000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1528096935000},{"_id":"themes/next/source/images/avatar.JPG","hash":"5eee179b1bcdd79821b687a9bd9ea1b6816e837c","modified":1528096935000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1528096935000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1528096935000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1528096935000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528096935000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1528096935000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528096935000},{"_id":"themes/next/source/images/favicon.ico","hash":"a2e77dbcc4d4261d3da14452d62509cf5c82682a","modified":1528096935000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1528096935000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1528096935000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1528096935000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1528096935000},{"_id":"source/img/blog-表格/blog-表格-页面.png","hash":"f3cb030d2bdf17433cb9b84011575d49286a9959","modified":1534046693000},{"_id":"source/img/设计模式-适配器Adapter/UML.png","hash":"1f5f60692c1950a29e989330572a47688ada4383","modified":1534057170000},{"_id":"source/img/java CAS原理/物理机结构.jpg","hash":"1da9193564a005ec0ea01d5293123eda45b97f66","modified":1534046693000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528096935000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528096935000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528096935000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528096935000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528096935000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528096935000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528096935000},{"_id":"themes/next/source/images/IMG_0001.JPG","hash":"9a75e125564266756aeb3cbcd6eb329927705cad","modified":1528096935000},{"_id":"source/2018/07/07/.DS_Store","hash":"3dd92fe7615cc225cf29ab2516434276aaeb65ec","modified":1534046693000},{"_id":"source/2018/06/03/.DS_Store","hash":"a6cf0674c2fe5dcf5d120c3e3dcc7de1c62fc45a","modified":1534046693000},{"_id":"source/2018/06/09/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1534048644000},{"_id":"source/2018/08/04/.DS_Store","hash":"86792bd8fc9fead8a2a58a83453327f0e050b94c","modified":1534046693000},{"_id":"source/2018/08/07/.DS_Store","hash":"35989e3234e3d12eb11f8dff71980773d9dbccab","modified":1534059487000},{"_id":"source/2018/08/12/.DS_Store","hash":"35989e3234e3d12eb11f8dff71980773d9dbccab","modified":1534059893000},{"_id":"source/img/blog-表格/blog-表格-md源码.png","hash":"632d358ffdee3d0415a32fe7d3dd0a95b42151a7","modified":1534046693000},{"_id":"source/img/blog-表格/blog-表格-正确.png","hash":"a5fa861122029ba54410c6b93fc9bd2e26873343","modified":1534046693000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1528096935000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1528096935000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1528096935000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1528096935000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1528096935000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1528096935000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1528096935000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1528096935000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1528096935000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1528096935000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1528096935000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1528096935000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1528096935000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1528096935000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1528096935000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1528096935000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1528096935000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1528096935000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1528096935000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1528096935000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1528096935000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1528096935000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1528096935000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1528096935000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1528096935000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1528096935000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1528096935000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1528096935000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1528096935000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1528096935000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1528096935000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1528096935000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1528096935000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1528096935000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1528096935000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1528096936000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1528096936000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1528096936000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1528096936000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1528096936000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1528096936000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1528096936000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1528096936000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1528096936000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1528096936000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1528096936000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1528096936000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1528096936000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1528096936000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1528096936000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1528096936000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1528096936000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1528096936000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1528096936000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1528096936000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1528096936000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1528096936000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1528096936000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1528096936000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1528096936000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1528096936000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1528096936000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1528096936000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1528096936000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1528096935000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1528096935000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1528096936000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1528096935000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1528096935000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1528096935000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1528096935000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1528096935000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1528096935000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1528096935000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1528096935000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1528096935000},{"_id":"source/img/blog-表格/blog-表格-正确md源码.png","hash":"14405d26c48b69195a73dc94c5fa8c697ad81d47","modified":1534046693000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1528096936000},{"_id":"source/2018/07/07/blog-表格/.DS_Store","hash":"268d767d20a7cba80ca6507c81182edf65ad6e24","modified":1534046693000},{"_id":"source/2018/06/03/Hexo、Github搭建Blog/.DS_Store","hash":"4ce4773ae33431d8394f47dce82057e07d189793","modified":1534046693000},{"_id":"source/2018/08/04/设计模式-原型【Prototype】/.DS_Store","hash":"8080ee748c6431fa8c8dd5ddfe15c6778f862dbf","modified":1534046693000},{"_id":"source/2018/06/09/设计模式-模版【Tempalte Method】/.DS_Store","hash":"137a7a3787fc234f2a82cd178e2bb6dc07733375","modified":1534046693000},{"_id":"source/2018/08/07/设计模式-适配器【Adapter】/.DS_Store","hash":"039d079661ec2f32c4872355fd61a2f8c8d53c30","modified":1534059476000},{"_id":"source/2018/08/12/设计模式-适配器【Adapter】/.DS_Store","hash":"039d079661ec2f32c4872355fd61a2f8c8d53c30","modified":1534059476000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1528096935000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1528096935000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1528096935000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1528096935000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1528096935000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1528096935000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1528096935000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1528096935000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1528096935000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1528096935000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1528096935000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1528096935000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528096936000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1528096936000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1528096936000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1528096936000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1528096936000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1528096936000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1528096936000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1528096936000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1528096935000},{"_id":"source/img/blog-表格/blog-表格-html源码.png","hash":"86495eda25055fc91a0db57ef929fb3a9442cce5","modified":1534046693000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1528096935000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1528096936000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1528096936000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1528096936000},{"_id":"source/2018/06/09/设计模式-模版【Tempalte Method】/img/.DS_Store","hash":"3dbbcf920546283a9f009cfac09dd109fb870997","modified":1534048644000},{"_id":"source/2018/06/09/设计模式-模版【Tempalte Method】/img/模版设计模式UML.png","hash":"39637af921a5251af0642f51066a2f1568aefbb9","modified":1528509285000},{"_id":"source/2018/08/04/设计模式-原型【Prototype】/img/.DS_Store","hash":"1196a1ba5ab50f32cd95232a2dfa488f334ef345","modified":1534046693000},{"_id":"source/2018/06/03/Hexo、Github搭建Blog/img/hexo设置.png","hash":"4e63e6df55855456756d8b43d7cbff4fae601556","modified":1534046693000},{"_id":"source/2018/08/12/设计模式-适配器【Adapter】/img/.DS_Store","hash":"4e0c7bc55ff6c5c806c74133a59c7b778974bbec","modified":1534059336000},{"_id":"source/2018/08/07/设计模式-适配器【Adapter】/img/.DS_Store","hash":"4e0c7bc55ff6c5c806c74133a59c7b778974bbec","modified":1534059336000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1528096935000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1528096935000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1528096935000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1528096935000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1528096935000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1528096935000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1528096935000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1528096936000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1528096935000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528096936000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1528096936000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1528096936000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1528096936000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1528096936000},{"_id":"source/2018/07/07/blog-表格/img/blog-表格/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1534046693000},{"_id":"source/2018/06/09/设计模式-模版【Tempalte Method】/img/设计模式-模版方法Template/模版设计模式UML.png","hash":"39637af921a5251af0642f51066a2f1568aefbb9","modified":1534046693000},{"_id":"source/2018/06/03/Hexo、Github搭建Blog/img/设置pages.png","hash":"34b838a6cd3ae611ff7829cb01a23e267436b17b","modified":1534046693000},{"_id":"source/2018/08/04/设计模式-原型【Prototype】/img/设计模式-原型Prototype/UML.png","hash":"a37277e7fb19bc5ee21823f7aadab9123b545130","modified":1534046693000},{"_id":"source/2018/06/03/Hexo、Github搭建Blog/img/创建账号.jpg","hash":"19e55caf5806cb68ff22bb93b783fdf39e2af553","modified":1534046693000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1528096936000},{"_id":"source/2018/07/07/blog-表格/img/blog-表格/blog-表格-页面.png","hash":"f3cb030d2bdf17433cb9b84011575d49286a9959","modified":1534046693000},{"_id":"source/2018/08/12/设计模式-适配器【Adapter】/img/设计模式-适配器Adapter/UML.png","hash":"1f5f60692c1950a29e989330572a47688ada4383","modified":1534057170000},{"_id":"source/2018/08/07/设计模式-适配器【Adapter】/img/设计模式-适配器Adapter/UML.png","hash":"1f5f60692c1950a29e989330572a47688ada4383","modified":1534057170000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1528096936000},{"_id":"source/2018/07/07/blog-表格/img/blog-表格/blog-表格-md源码.png","hash":"632d358ffdee3d0415a32fe7d3dd0a95b42151a7","modified":1534046693000},{"_id":"source/2018/07/07/blog-表格/img/blog-表格/blog-表格-正确.png","hash":"a5fa861122029ba54410c6b93fc9bd2e26873343","modified":1534046693000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1528096936000},{"_id":"source/2018/07/07/blog-表格/img/blog-表格/blog-表格-正确md源码.png","hash":"14405d26c48b69195a73dc94c5fa8c697ad81d47","modified":1534046693000},{"_id":"source/2018/07/07/blog-表格/img/blog-表格/blog-表格-html源码.png","hash":"86495eda25055fc91a0db57ef929fb3a9442cce5","modified":1534046693000},{"_id":"public/search.xml","hash":"066f4106d9b6946ade7f4455287cec0acc2cb17c","modified":1534060840810},{"_id":"public/categories/index.html","hash":"2ff12862b3d8f4f4c98bffe0fd3b3e95094d9405","modified":1534060840832},{"_id":"public/tags/index.html","hash":"6c73135e5b97944f8e6e9ae1f0814c6d6a508c0b","modified":1534060840832},{"_id":"public/2018/08/12/设计模式-适配器【Adapter】/index.html","hash":"9f98e0e4cb4de0eabe1cbf1f39ed2bfa4aefddab","modified":1534060840832},{"_id":"public/2018/08/12/volatile关键字/index.html","hash":"219bafbaf6ada99e917c369a5ce8005e463216e2","modified":1534060840832},{"_id":"public/2018/08/12/happen-before/index.html","hash":"b2a82ecf0947dd7ab726fef52ec7b82ad68c9ef6","modified":1534060840833},{"_id":"public/2018/08/12/逃逸分析和栈上分配/index.html","hash":"35f30d3fc9a0d7ff8deb53658ed530f2af96ed6a","modified":1534060840833},{"_id":"public/2018/08/04/设计模式-原型【Prototype】/index.html","hash":"b4f5b8195dd32c0129ab12c2998612c151915741","modified":1534060840833},{"_id":"public/2018/07/22/java-CAS原理/index.html","hash":"63829779c2f8a900ee0e203756e97a272a3877ff","modified":1534060840833},{"_id":"public/2018/07/14/jvm工具-greys/index.html","hash":"780755e00f34c7b6de10c3771b7edbeaf60b4b98","modified":1534060840833},{"_id":"public/2018/07/07/blog-表格/index.html","hash":"4d5f8d667c6911c233eb2afd9e30c1f69540b356","modified":1534060840834},{"_id":"public/2018/07/07/java-8-stream/index.html","hash":"2cd794cac7b7e5ea56b655837cd2c5e12002dfdd","modified":1534060840834},{"_id":"public/2018/06/09/设计模式-模版【Tempalte Method】/index.html","hash":"9a3110e3f6677f01994d98c49426806229f78972","modified":1534060840834},{"_id":"public/2018/06/04/Hexo、Github搭建Blog-站内搜索/index.html","hash":"39d9c6a03b5f1458609e6c3b2206662cb1202f7c","modified":1534060840834},{"_id":"public/2018/06/03/Hexo、Github搭建Blog/index.html","hash":"f32fcf13398a76bbaf495741331050b9bd3ea56e","modified":1534060840834},{"_id":"public/2018/04/17/hello-world/index.html","hash":"765a85acff61e268312ae254a63d20d2a46f617f","modified":1534060840834},{"_id":"public/archives/index.html","hash":"9ef68b04dd9ede51afc46e0787b61316f2aab4d1","modified":1534060840835},{"_id":"public/archives/page/2/index.html","hash":"f9ad4a12c86c8e10595afe62db5700048a5b87d0","modified":1534060840835},{"_id":"public/archives/2018/index.html","hash":"00a13f2cb0f1ce8a03d7039fed7eb6b25c37d898","modified":1534060840835},{"_id":"public/archives/2018/page/2/index.html","hash":"8ced804b6552dcf42a78940c4ce9092b3bf2e456","modified":1534060840835},{"_id":"public/archives/2018/04/index.html","hash":"af574dfc15b3a2b1b03f3a3e4132c3c35e166c86","modified":1534060840835},{"_id":"public/archives/2018/06/index.html","hash":"9bc8d16b0eea7b81f3e8cf602b115d4a70dea2d2","modified":1534060840836},{"_id":"public/archives/2018/07/index.html","hash":"11a88e45104addb4a4858c3808e23b32644d9ef4","modified":1534060840836},{"_id":"public/archives/2018/08/index.html","hash":"9577f28e02507cb330656d26a8fce4c07688c1fb","modified":1534060840836},{"_id":"public/categories/blog/index.html","hash":"510f9e6b4857d22d31a1a6dac5660939ece1afe8","modified":1534060840836},{"_id":"public/categories/jvm/index.html","hash":"746a69d7de77cf156b8920abe05c07dc5c864480","modified":1534060840836},{"_id":"public/categories/java8/index.html","hash":"e900be4fab22e015092ef52b3f88e1202ee6840c","modified":1534060840836},{"_id":"public/categories/设计模式/index.html","hash":"81fb7e3efc49bb37d22d94d42d80f910ff4d2ed3","modified":1534060840836},{"_id":"public/index.html","hash":"526fdb120945f426b4c8a67a520676ad03b2354c","modified":1534060840836},{"_id":"public/page/2/index.html","hash":"b2665e2da357d516abb9c3001e9a2ab3f8a27a10","modified":1534060840836},{"_id":"public/tags/blog/index.html","hash":"2af53858922ac782faf34727c0bd60f62ffc7741","modified":1534060840836},{"_id":"public/tags/jvm/index.html","hash":"6819355b8f4aff6c4e12626ea7fc7084b4951d0f","modified":1534060840836},{"_id":"public/tags/java8/index.html","hash":"a779fd76fc4c24ca48fb25e98204d32f1f6d9dd2","modified":1534060840836},{"_id":"public/tags/设计模式/index.html","hash":"5660bc89bdd33383b6fdcd25dd532c274736bb0b","modified":1534060840836},{"_id":"public/img/favicon.ico","hash":"a2e77dbcc4d4261d3da14452d62509cf5c82682a","modified":1534060840836},{"_id":"public/img/模版设计模式UML.png","hash":"39637af921a5251af0642f51066a2f1568aefbb9","modified":1534060840836},{"_id":"public/img/hexo设置.png","hash":"4e63e6df55855456756d8b43d7cbff4fae601556","modified":1534060840837},{"_id":"public/img/设计模式-原型Prototype/UML_Prototype.mdj","hash":"a95b48139700df959aa3f3449a726af10a342cf3","modified":1534060840837},{"_id":"public/img/设计模式-原型Prototype/UML.png","hash":"a37277e7fb19bc5ee21823f7aadab9123b545130","modified":1534060840837},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1534060840837},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1534060840837},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534060840837},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1534060840837},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1534060840837},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1534060840837},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1534060840837},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1534060840837},{"_id":"public/images/avatar.JPG","hash":"5eee179b1bcdd79821b687a9bd9ea1b6816e837c","modified":1534060840837},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1534060840837},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1534060840837},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1534060840837},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534060840837},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1534060840837},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534060840837},{"_id":"public/images/favicon.ico","hash":"a2e77dbcc4d4261d3da14452d62509cf5c82682a","modified":1534060840837},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1534060840837},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1534060840837},{"_id":"public/favicon.ico","hash":"a2e77dbcc4d4261d3da14452d62509cf5c82682a","modified":1534060840837},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1534060840838},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534060840838},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1534060840838},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1534060840838},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1534060840838},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1534060840838},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1534060840838},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1534060840838},{"_id":"public/2018/06/09/设计模式-模版【Tempalte Method】/img/模版设计模式UML.png","hash":"39637af921a5251af0642f51066a2f1568aefbb9","modified":1534060840838},{"_id":"public/2018/06/03/Hexo、Github搭建Blog/img/hexo设置.png","hash":"4e63e6df55855456756d8b43d7cbff4fae601556","modified":1534060840839},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1534060840839},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1534060840839},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1534060840839},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1534060840839},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1534060840839},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1534060840839},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1534060840839},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1534060840839},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1534060840839},{"_id":"public/img/blog-表格/blog-表格-页面.png","hash":"f3cb030d2bdf17433cb9b84011575d49286a9959","modified":1534060841546},{"_id":"public/img/设计模式-适配器Adapter/UML.png","hash":"1f5f60692c1950a29e989330572a47688ada4383","modified":1534060841548},{"_id":"public/img/java CAS原理/物理机结构.jpg","hash":"1da9193564a005ec0ea01d5293123eda45b97f66","modified":1534060841558},{"_id":"public/images/IMG_0001.JPG","hash":"9a75e125564266756aeb3cbcd6eb329927705cad","modified":1534060841558},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1534060841558},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1534060841558},{"_id":"public/2018/06/09/设计模式-模版【Tempalte Method】/img/设计模式-模版方法Template/模版设计模式UML.png","hash":"39637af921a5251af0642f51066a2f1568aefbb9","modified":1534060841558},{"_id":"public/2018/08/04/设计模式-原型【Prototype】/img/设计模式-原型Prototype/UML.png","hash":"a37277e7fb19bc5ee21823f7aadab9123b545130","modified":1534060841558},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1534060841570},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1534060841570},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1534060841574},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1534060841574},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1534060841574},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1534060841574},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1534060841574},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1534060841574},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1534060841574},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1534060841575},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1534060841575},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1534060841575},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1534060841575},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1534060841575},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1534060841575},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1534060841575},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1534060841576},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1534060841576},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1534060841576},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1534060841576},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1534060841576},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1534060841576},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1534060841576},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1534060841576},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1534060841576},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1534060841576},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1534060841576},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1534060841576},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1534060841576},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1534060841576},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1534060841576},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1534060841576},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1534060841577},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1534060841577},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1534060841577},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1534060841577},{"_id":"public/css/main.css","hash":"a7b5d350ecc68f571e207942f7a0024ba48d71fb","modified":1534060841577},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1534060841577},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1534060841577},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1534060841577},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1534060841577},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1534060841577},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1534060841577},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1534060841577},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1534060841577},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1534060841577},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1534060841577},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1534060841577},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1534060841577},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1534060841577},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1534060841577},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1534060841577},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1534060841578},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1534060841578},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1534060841578},{"_id":"public/img/创建账号.jpg","hash":"19e55caf5806cb68ff22bb93b783fdf39e2af553","modified":1534060841578},{"_id":"public/img/设置pages.png","hash":"34b838a6cd3ae611ff7829cb01a23e267436b17b","modified":1534060841578},{"_id":"public/img/blog-表格/blog-表格-md源码.png","hash":"632d358ffdee3d0415a32fe7d3dd0a95b42151a7","modified":1534060841578},{"_id":"public/img/blog-表格/blog-表格-正确.png","hash":"a5fa861122029ba54410c6b93fc9bd2e26873343","modified":1534060841578},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1534060841578},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1534060841578},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1534060841578},{"_id":"public/2018/07/07/blog-表格/img/blog-表格/blog-表格-页面.png","hash":"f3cb030d2bdf17433cb9b84011575d49286a9959","modified":1534060841579},{"_id":"public/2018/08/07/设计模式-适配器【Adapter】/img/设计模式-适配器Adapter/UML.png","hash":"1f5f60692c1950a29e989330572a47688ada4383","modified":1534060841579},{"_id":"public/2018/08/12/设计模式-适配器【Adapter】/img/设计模式-适配器Adapter/UML.png","hash":"1f5f60692c1950a29e989330572a47688ada4383","modified":1534060841579},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1534060841587},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1534060841587},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1534060841587},{"_id":"public/img/blog-表格/blog-表格-正确md源码.png","hash":"14405d26c48b69195a73dc94c5fa8c697ad81d47","modified":1534060841588},{"_id":"public/2018/06/03/Hexo、Github搭建Blog/img/创建账号.jpg","hash":"19e55caf5806cb68ff22bb93b783fdf39e2af553","modified":1534060841588},{"_id":"public/2018/06/03/Hexo、Github搭建Blog/img/设置pages.png","hash":"34b838a6cd3ae611ff7829cb01a23e267436b17b","modified":1534060841588},{"_id":"public/2018/07/07/blog-表格/img/blog-表格/blog-表格-md源码.png","hash":"632d358ffdee3d0415a32fe7d3dd0a95b42151a7","modified":1534060841588},{"_id":"public/2018/07/07/blog-表格/img/blog-表格/blog-表格-正确.png","hash":"a5fa861122029ba54410c6b93fc9bd2e26873343","modified":1534060841588},{"_id":"public/2018/07/07/blog-表格/img/blog-表格/blog-表格-正确md源码.png","hash":"14405d26c48b69195a73dc94c5fa8c697ad81d47","modified":1534060841595},{"_id":"public/img/blog-表格/blog-表格-html源码.png","hash":"86495eda25055fc91a0db57ef929fb3a9442cce5","modified":1534060841623},{"_id":"public/2018/07/07/blog-表格/img/blog-表格/blog-表格-html源码.png","hash":"86495eda25055fc91a0db57ef929fb3a9442cce5","modified":1534060841632},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1534060841670}],"Category":[{"name":"blog","_id":"cjkqk7qge000378b31vlvp0iy"},{"name":"jvm","_id":"cjkqk7qgw000j78b3r409fmte"},{"name":"java8","_id":"cjkqk7qgz000q78b3a7cdrsvs"},{"name":"设计模式","_id":"cjkqk7qh5001878b34hwpuavg"}],"Data":[],"Page":[{"title":"文章分类","date":"2018-06-03T16:00:00.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-06-04 00:00:00\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-08-12T04:04:53.000Z","path":"categories/index.html","layout":"page","_id":"cjkqk7qga000178b3gtz6yq1t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-06-03T16:00:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-06-04 00:00:00\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-08-12T04:04:53.000Z","path":"tags/index.html","layout":"page","_id":"cjkqk7qmd001k78b38xiee68p","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo、Github搭建Blog--站内搜索","date":"2018-06-04T14:45:51.000Z","type":"categories","_content":"\n\n### 安装\n站内搜索主要是通过集成插件的方式实现，步骤如下：\t\t\n1. 安装 hexo-generator-search\t\t\n\t在站点的根目录下执行以下命令：\t\t\n`$ npm install hexo-generator-search --save`\t\n2.\t启用搜索\t\t\n\t编辑blog 根目录_config.yaml:\t\n\t<pre class=“prettyprint”>\n\tsearch:\n\t path: search.xml\n\t field: post\n\t format: html\n\t limit: 10000\n\t</pre>","source":"_posts/Hexo、Github搭建Blog-站内搜索.md","raw":"---\ntitle: Hexo、Github搭建Blog--站内搜索\ndate: 2018-06-04 22:45:51\ntype: \"categories\"\ncategories: blog\ntags: blog\n---\n\n\n### 安装\n站内搜索主要是通过集成插件的方式实现，步骤如下：\t\t\n1. 安装 hexo-generator-search\t\t\n\t在站点的根目录下执行以下命令：\t\t\n`$ npm install hexo-generator-search --save`\t\n2.\t启用搜索\t\t\n\t编辑blog 根目录_config.yaml:\t\n\t<pre class=“prettyprint”>\n\tsearch:\n\t path: search.xml\n\t field: post\n\t format: html\n\t limit: 10000\n\t</pre>","slug":"Hexo、Github搭建Blog-站内搜索","published":1,"updated":"2018-08-12T04:04:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkqk7qg5000078b3ztvzu4tr","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>站内搜索主要是通过集成插件的方式实现，步骤如下：        </p>\n<ol>\n<li>安装 hexo-generator-search<br> 在站点的根目录下执行以下命令：<br><code>$ npm install hexo-generator-search --save</code>    </li>\n<li>启用搜索<br>编辑blog 根目录_config.yaml:    <pre class=\"“prettyprint”\">\nsearch:\npath: search.xml\nfield: post\nformat: html\nlimit: 10000\n</pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>站内搜索主要是通过集成插件的方式实现，步骤如下：        </p>\n<ol>\n<li>安装 hexo-generator-search<br> 在站点的根目录下执行以下命令：<br><code>$ npm install hexo-generator-search --save</code>    </li>\n<li>启用搜索<br>编辑blog 根目录_config.yaml:    <pre class=\"“prettyprint”\">\nsearch:\npath: search.xml\nfield: post\nformat: html\nlimit: 10000\n</pre></li>\n</ol>\n"},{"title":"Hexo、Github搭建Blog","date":"2018-06-03T07:56:25.000Z","type":"categories","comments":1,"_content":"\n\n### 选择github和hexo搭建blog的原因\n\n这是我自己搭建的第一个blog,现在比较流行的有wordpess、github blog。wordpress 通过了解构建比较发杂，所以选择了使用github blog 搭建，使用的是md语法，部署直接使用的是github服务器，也不需要单独搭建服务器。wordpress我不是太了解，大神勿喷。\n\n**个人想法：现在做技术，其实在学校上学的时候是有些是时候有很多相似的地方，有些的地方有意思的地方就整理下，善于记录、积累**:\t\t\n一，能把这些好想法也好，思路也好，都能记录下来，以便于日后能用到\t\n二，书写文章对思路也是一个很好的锻炼，就好像“茶壶里煮饺子”，饺子好了一定要倒出来，才算掌握，一个新的技术只有能清晰的讲解出来，也才算真正的理解\t\t\n三，以后在面试的时候也能也可以在简历上，把自己的github、个人站点、blog写上，也会让你在面试中加分\n\t\n我也开始上路，把自己的blog刚刚弄好了，就写了这篇文章，md，之前写wiki用过，github写过简单的README.md，但是没有用md来写文章，可能文章格式不好看的地方，大神勿喷\n\n### 环境准备\n\n##### git\n我感觉，要是做开发的同学本地一定会装git的，git主要拉取github项目，和github上项目关联。\n常用的命令也不说了，日常开发中也会经常用到。\n\n##### node\n再有一个环境就是node环境，这个主要是hexo这个工具依赖node环境，node的环境的要求，这个我也\n太清楚，我的本地的**node version : v8.11.1**，之前开发用的6.x的版本，现在不做node开发，换的高一点版本。**6.x+** 肯定是够用的。没问题。\n\n##### hexo\nhexo 这是blog主要使用的工具，步骤如下：\n\n1. \t安装命令\t`npm i -g hexo`\n2.\t进入目录\t`cd /xx/xx`\n3. 执行初始化\t`hexo init`\n\n解释下生成的目录\n\n* node_modules：是依赖包\n* public：存放的是生成的页面\n* scaffolds：命令生成文章等的模板\n* source：用命令创建的各种文章\n* themes：主题\n* _config.yml：整个博客的配置\n* db.json：source解析所得到的\n* package.json：项目所需模块项目的配置信息\n\n##### 创建blog project\n1. 首先创建github项目。\n![](img/创建账号.jpg)\n\n2.\t设置项目为blog，保存\n![](img/设置pages.png)\n\n3.\t设置hexo信息，设置你的git地址，分支。\n![](img/hexo设置.png)\n\n4.\t开始小试牛刀\t\n`hexo clean`\t\t\n`hexo g`\t\t\n`hexo s`\t\n\t**hexo g** 是生成对应的文件，也就是把md编写的md文件，生成对应的html文件，可以让服务运行\n\t\n\t**hexo s** 是启动hexo 服务，执行该命令会看到 \n\t`INFO  Hexo is running at http://localhost:4000/blog/. Press Ctrl+C to stop.`\n\t也就是说hexo服务已经起来了。可以通过http://localhost:4000/blog/ 这个url访问。也可以通过**-p**命令指定端口号。\t\t\n\t\t\n\t**hexo deploy** 这个是部署github 服务的命令，就是讲本地的代码push到服务器上，其实也就是一个静态页面，推送上去。使用这个命令，在公网上使用你刚刚在github中设置pages的那块的url访问你的blog。这样别人就能看到了。\n\n\t**hexo new 'my first blog'** 可以使用new 这个参数创建md 文件，会直接生成头信息。用md编辑器编辑，再推送到服务器上就ok了。\n\t\n5.\t样式问题\n\t其实搞blog，有种当年玩qq空间的感觉，可以到网站去找自己的喜欢的样式，去设置，我也刚刚开始，也没有做的很好看，所以这块就不分享了。\n\t\n6.\t站长统计及搜索引擎\n\n\t统计留言：可以集成第三的统计插件，在自己的blog里的_config.yml 文件中设置。\t\n\t搜索引擎：可以在百度的站长工具中设置，自己要被爬的链接，把自己的blog url 贴进去，过几天百度爬过了就可以通过百度搜索自己的blog了。自己的文章也可以在百度中搜到了。\n\t\t\t\n7.\t域名问题\n\t可以自己备案一个域名，在github中blog的项目设置中，pages那块会有个域名设置，这样。github\n\t会这个域名解析到你的blog项目下，这样就可以使用自己的域名访问了。是不是很爽呐。\n\n**总结**\t\n\t我这个只是刚刚开始，也算是小试牛刀，文章中提到的好多细节，我都没有深入去搞，我下面，我会写一些技术的文章，在写作的过程中，有深入的细节，我也会更新到这个文账中。\n\n**Blog源码地址：**\thttps://github.com/wangypeng/blog-source\n","source":"_posts/Hexo、Github搭建Blog.md","raw":"---\ntitle: Hexo、Github搭建Blog\ndate: 2018-06-03 15:56:25\ntype: \"categories\"\ncategories: blog\ncomments: true\ntags: blog\n---\n\n\n### 选择github和hexo搭建blog的原因\n\n这是我自己搭建的第一个blog,现在比较流行的有wordpess、github blog。wordpress 通过了解构建比较发杂，所以选择了使用github blog 搭建，使用的是md语法，部署直接使用的是github服务器，也不需要单独搭建服务器。wordpress我不是太了解，大神勿喷。\n\n**个人想法：现在做技术，其实在学校上学的时候是有些是时候有很多相似的地方，有些的地方有意思的地方就整理下，善于记录、积累**:\t\t\n一，能把这些好想法也好，思路也好，都能记录下来，以便于日后能用到\t\n二，书写文章对思路也是一个很好的锻炼，就好像“茶壶里煮饺子”，饺子好了一定要倒出来，才算掌握，一个新的技术只有能清晰的讲解出来，也才算真正的理解\t\t\n三，以后在面试的时候也能也可以在简历上，把自己的github、个人站点、blog写上，也会让你在面试中加分\n\t\n我也开始上路，把自己的blog刚刚弄好了，就写了这篇文章，md，之前写wiki用过，github写过简单的README.md，但是没有用md来写文章，可能文章格式不好看的地方，大神勿喷\n\n### 环境准备\n\n##### git\n我感觉，要是做开发的同学本地一定会装git的，git主要拉取github项目，和github上项目关联。\n常用的命令也不说了，日常开发中也会经常用到。\n\n##### node\n再有一个环境就是node环境，这个主要是hexo这个工具依赖node环境，node的环境的要求，这个我也\n太清楚，我的本地的**node version : v8.11.1**，之前开发用的6.x的版本，现在不做node开发，换的高一点版本。**6.x+** 肯定是够用的。没问题。\n\n##### hexo\nhexo 这是blog主要使用的工具，步骤如下：\n\n1. \t安装命令\t`npm i -g hexo`\n2.\t进入目录\t`cd /xx/xx`\n3. 执行初始化\t`hexo init`\n\n解释下生成的目录\n\n* node_modules：是依赖包\n* public：存放的是生成的页面\n* scaffolds：命令生成文章等的模板\n* source：用命令创建的各种文章\n* themes：主题\n* _config.yml：整个博客的配置\n* db.json：source解析所得到的\n* package.json：项目所需模块项目的配置信息\n\n##### 创建blog project\n1. 首先创建github项目。\n![](img/创建账号.jpg)\n\n2.\t设置项目为blog，保存\n![](img/设置pages.png)\n\n3.\t设置hexo信息，设置你的git地址，分支。\n![](img/hexo设置.png)\n\n4.\t开始小试牛刀\t\n`hexo clean`\t\t\n`hexo g`\t\t\n`hexo s`\t\n\t**hexo g** 是生成对应的文件，也就是把md编写的md文件，生成对应的html文件，可以让服务运行\n\t\n\t**hexo s** 是启动hexo 服务，执行该命令会看到 \n\t`INFO  Hexo is running at http://localhost:4000/blog/. Press Ctrl+C to stop.`\n\t也就是说hexo服务已经起来了。可以通过http://localhost:4000/blog/ 这个url访问。也可以通过**-p**命令指定端口号。\t\t\n\t\t\n\t**hexo deploy** 这个是部署github 服务的命令，就是讲本地的代码push到服务器上，其实也就是一个静态页面，推送上去。使用这个命令，在公网上使用你刚刚在github中设置pages的那块的url访问你的blog。这样别人就能看到了。\n\n\t**hexo new 'my first blog'** 可以使用new 这个参数创建md 文件，会直接生成头信息。用md编辑器编辑，再推送到服务器上就ok了。\n\t\n5.\t样式问题\n\t其实搞blog，有种当年玩qq空间的感觉，可以到网站去找自己的喜欢的样式，去设置，我也刚刚开始，也没有做的很好看，所以这块就不分享了。\n\t\n6.\t站长统计及搜索引擎\n\n\t统计留言：可以集成第三的统计插件，在自己的blog里的_config.yml 文件中设置。\t\n\t搜索引擎：可以在百度的站长工具中设置，自己要被爬的链接，把自己的blog url 贴进去，过几天百度爬过了就可以通过百度搜索自己的blog了。自己的文章也可以在百度中搜到了。\n\t\t\t\n7.\t域名问题\n\t可以自己备案一个域名，在github中blog的项目设置中，pages那块会有个域名设置，这样。github\n\t会这个域名解析到你的blog项目下，这样就可以使用自己的域名访问了。是不是很爽呐。\n\n**总结**\t\n\t我这个只是刚刚开始，也算是小试牛刀，文章中提到的好多细节，我都没有深入去搞，我下面，我会写一些技术的文章，在写作的过程中，有深入的细节，我也会更新到这个文账中。\n\n**Blog源码地址：**\thttps://github.com/wangypeng/blog-source\n","slug":"Hexo、Github搭建Blog","published":1,"updated":"2018-08-12T04:04:53.000Z","layout":"post","photos":[],"link":"","_id":"cjkqk7qgb000278b3cnf6vfmo","content":"<h3 id=\"选择github和hexo搭建blog的原因\"><a href=\"#选择github和hexo搭建blog的原因\" class=\"headerlink\" title=\"选择github和hexo搭建blog的原因\"></a>选择github和hexo搭建blog的原因</h3><p>这是我自己搭建的第一个blog,现在比较流行的有wordpess、github blog。wordpress 通过了解构建比较发杂，所以选择了使用github blog 搭建，使用的是md语法，部署直接使用的是github服务器，也不需要单独搭建服务器。wordpress我不是太了解，大神勿喷。</p>\n<p><strong>个人想法：现在做技术，其实在学校上学的时候是有些是时候有很多相似的地方，有些的地方有意思的地方就整理下，善于记录、积累</strong>:<br>一，能把这些好想法也好，思路也好，都能记录下来，以便于日后能用到<br>二，书写文章对思路也是一个很好的锻炼，就好像“茶壶里煮饺子”，饺子好了一定要倒出来，才算掌握，一个新的技术只有能清晰的讲解出来，也才算真正的理解<br>三，以后在面试的时候也能也可以在简历上，把自己的github、个人站点、blog写上，也会让你在面试中加分</p>\n<p>我也开始上路，把自己的blog刚刚弄好了，就写了这篇文章，md，之前写wiki用过，github写过简单的README.md，但是没有用md来写文章，可能文章格式不好看的地方，大神勿喷</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h5 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h5><p>我感觉，要是做开发的同学本地一定会装git的，git主要拉取github项目，和github上项目关联。<br>常用的命令也不说了，日常开发中也会经常用到。</p>\n<h5 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h5><p>再有一个环境就是node环境，这个主要是hexo这个工具依赖node环境，node的环境的要求，这个我也<br>太清楚，我的本地的<strong>node version : v8.11.1</strong>，之前开发用的6.x的版本，现在不做node开发，换的高一点版本。<strong>6.x+</strong> 肯定是够用的。没问题。</p>\n<h5 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h5><p>hexo 这是blog主要使用的工具，步骤如下：</p>\n<ol>\n<li>安装命令    <code>npm i -g hexo</code></li>\n<li>进入目录    <code>cd /xx/xx</code></li>\n<li>执行初始化    <code>hexo init</code></li>\n</ol>\n<p>解释下生成的目录</p>\n<ul>\n<li>node_modules：是依赖包</li>\n<li>public：存放的是生成的页面</li>\n<li>scaffolds：命令生成文章等的模板</li>\n<li>source：用命令创建的各种文章</li>\n<li>themes：主题</li>\n<li>_config.yml：整个博客的配置</li>\n<li>db.json：source解析所得到的</li>\n<li>package.json：项目所需模块项目的配置信息</li>\n</ul>\n<h5 id=\"创建blog-project\"><a href=\"#创建blog-project\" class=\"headerlink\" title=\"创建blog project\"></a>创建blog project</h5><ol>\n<li><p>首先创建github项目。<br><img src=\"img/创建账号.jpg\" alt=\"\"></p>\n</li>\n<li><p>设置项目为blog，保存<br><img src=\"img/设置pages.png\" alt=\"\"></p>\n</li>\n<li><p>设置hexo信息，设置你的git地址，分支。<br><img src=\"img/hexo设置.png\" alt=\"\"></p>\n</li>\n<li><p>开始小试牛刀<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo s</code><br><strong>hexo g</strong> 是生成对应的文件，也就是把md编写的md文件，生成对应的html文件，可以让服务运行</p>\n<p><strong>hexo s</strong> 是启动hexo 服务，执行该命令会看到<br><code>INFO  Hexo is running at http://localhost:4000/blog/. Press Ctrl+C to stop.</code><br>也就是说hexo服务已经起来了。可以通过<a href=\"http://localhost:4000/blog/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/blog/</a> 这个url访问。也可以通过<strong>-p</strong>命令指定端口号。        </p>\n<p><strong>hexo deploy</strong> 这个是部署github 服务的命令，就是讲本地的代码push到服务器上，其实也就是一个静态页面，推送上去。使用这个命令，在公网上使用你刚刚在github中设置pages的那块的url访问你的blog。这样别人就能看到了。</p>\n<p><strong>hexo new ‘my first blog’</strong> 可以使用new 这个参数创建md 文件，会直接生成头信息。用md编辑器编辑，再推送到服务器上就ok了。</p>\n</li>\n<li><p>样式问题<br>其实搞blog，有种当年玩qq空间的感觉，可以到网站去找自己的喜欢的样式，去设置，我也刚刚开始，也没有做的很好看，所以这块就不分享了。</p>\n</li>\n<li><p>站长统计及搜索引擎</p>\n<p>统计留言：可以集成第三的统计插件，在自己的blog里的_config.yml 文件中设置。<br>搜索引擎：可以在百度的站长工具中设置，自己要被爬的链接，把自己的blog url 贴进去，过几天百度爬过了就可以通过百度搜索自己的blog了。自己的文章也可以在百度中搜到了。</p>\n</li>\n<li><p>域名问题<br>可以自己备案一个域名，在github中blog的项目设置中，pages那块会有个域名设置，这样。github<br>会这个域名解析到你的blog项目下，这样就可以使用自己的域名访问了。是不是很爽呐。</p>\n</li>\n</ol>\n<p><strong>总结</strong><br>    我这个只是刚刚开始，也算是小试牛刀，文章中提到的好多细节，我都没有深入去搞，我下面，我会写一些技术的文章，在写作的过程中，有深入的细节，我也会更新到这个文账中。</p>\n<p><strong>Blog源码地址：</strong>    <a href=\"https://github.com/wangypeng/blog-source\" target=\"_blank\" rel=\"noopener\">https://github.com/wangypeng/blog-source</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"选择github和hexo搭建blog的原因\"><a href=\"#选择github和hexo搭建blog的原因\" class=\"headerlink\" title=\"选择github和hexo搭建blog的原因\"></a>选择github和hexo搭建blog的原因</h3><p>这是我自己搭建的第一个blog,现在比较流行的有wordpess、github blog。wordpress 通过了解构建比较发杂，所以选择了使用github blog 搭建，使用的是md语法，部署直接使用的是github服务器，也不需要单独搭建服务器。wordpress我不是太了解，大神勿喷。</p>\n<p><strong>个人想法：现在做技术，其实在学校上学的时候是有些是时候有很多相似的地方，有些的地方有意思的地方就整理下，善于记录、积累</strong>:<br>一，能把这些好想法也好，思路也好，都能记录下来，以便于日后能用到<br>二，书写文章对思路也是一个很好的锻炼，就好像“茶壶里煮饺子”，饺子好了一定要倒出来，才算掌握，一个新的技术只有能清晰的讲解出来，也才算真正的理解<br>三，以后在面试的时候也能也可以在简历上，把自己的github、个人站点、blog写上，也会让你在面试中加分</p>\n<p>我也开始上路，把自己的blog刚刚弄好了，就写了这篇文章，md，之前写wiki用过，github写过简单的README.md，但是没有用md来写文章，可能文章格式不好看的地方，大神勿喷</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h5 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h5><p>我感觉，要是做开发的同学本地一定会装git的，git主要拉取github项目，和github上项目关联。<br>常用的命令也不说了，日常开发中也会经常用到。</p>\n<h5 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h5><p>再有一个环境就是node环境，这个主要是hexo这个工具依赖node环境，node的环境的要求，这个我也<br>太清楚，我的本地的<strong>node version : v8.11.1</strong>，之前开发用的6.x的版本，现在不做node开发，换的高一点版本。<strong>6.x+</strong> 肯定是够用的。没问题。</p>\n<h5 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h5><p>hexo 这是blog主要使用的工具，步骤如下：</p>\n<ol>\n<li>安装命令    <code>npm i -g hexo</code></li>\n<li>进入目录    <code>cd /xx/xx</code></li>\n<li>执行初始化    <code>hexo init</code></li>\n</ol>\n<p>解释下生成的目录</p>\n<ul>\n<li>node_modules：是依赖包</li>\n<li>public：存放的是生成的页面</li>\n<li>scaffolds：命令生成文章等的模板</li>\n<li>source：用命令创建的各种文章</li>\n<li>themes：主题</li>\n<li>_config.yml：整个博客的配置</li>\n<li>db.json：source解析所得到的</li>\n<li>package.json：项目所需模块项目的配置信息</li>\n</ul>\n<h5 id=\"创建blog-project\"><a href=\"#创建blog-project\" class=\"headerlink\" title=\"创建blog project\"></a>创建blog project</h5><ol>\n<li><p>首先创建github项目。<br><img src=\"img/创建账号.jpg\" alt=\"\"></p>\n</li>\n<li><p>设置项目为blog，保存<br><img src=\"img/设置pages.png\" alt=\"\"></p>\n</li>\n<li><p>设置hexo信息，设置你的git地址，分支。<br><img src=\"img/hexo设置.png\" alt=\"\"></p>\n</li>\n<li><p>开始小试牛刀<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo s</code><br><strong>hexo g</strong> 是生成对应的文件，也就是把md编写的md文件，生成对应的html文件，可以让服务运行</p>\n<p><strong>hexo s</strong> 是启动hexo 服务，执行该命令会看到<br><code>INFO  Hexo is running at http://localhost:4000/blog/. Press Ctrl+C to stop.</code><br>也就是说hexo服务已经起来了。可以通过<a href=\"http://localhost:4000/blog/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/blog/</a> 这个url访问。也可以通过<strong>-p</strong>命令指定端口号。        </p>\n<p><strong>hexo deploy</strong> 这个是部署github 服务的命令，就是讲本地的代码push到服务器上，其实也就是一个静态页面，推送上去。使用这个命令，在公网上使用你刚刚在github中设置pages的那块的url访问你的blog。这样别人就能看到了。</p>\n<p><strong>hexo new ‘my first blog’</strong> 可以使用new 这个参数创建md 文件，会直接生成头信息。用md编辑器编辑，再推送到服务器上就ok了。</p>\n</li>\n<li><p>样式问题<br>其实搞blog，有种当年玩qq空间的感觉，可以到网站去找自己的喜欢的样式，去设置，我也刚刚开始，也没有做的很好看，所以这块就不分享了。</p>\n</li>\n<li><p>站长统计及搜索引擎</p>\n<p>统计留言：可以集成第三的统计插件，在自己的blog里的_config.yml 文件中设置。<br>搜索引擎：可以在百度的站长工具中设置，自己要被爬的链接，把自己的blog url 贴进去，过几天百度爬过了就可以通过百度搜索自己的blog了。自己的文章也可以在百度中搜到了。</p>\n</li>\n<li><p>域名问题<br>可以自己备案一个域名，在github中blog的项目设置中，pages那块会有个域名设置，这样。github<br>会这个域名解析到你的blog项目下，这样就可以使用自己的域名访问了。是不是很爽呐。</p>\n</li>\n</ol>\n<p><strong>总结</strong><br>    我这个只是刚刚开始，也算是小试牛刀，文章中提到的好多细节，我都没有深入去搞，我下面，我会写一些技术的文章，在写作的过程中，有深入的细节，我也会更新到这个文账中。</p>\n<p><strong>Blog源码地址：</strong>    <a href=\"https://github.com/wangypeng/blog-source\" target=\"_blank\" rel=\"noopener\">https://github.com/wangypeng/blog-source</a></p>\n"},{"title":"blog-表格","date":"2018-07-07T11:27:38.000Z","type":"categories","_content":"\n\n### blog-md表格\n\n今天写blog的时候，想写一个表格，就是网上百度了一下，md表格的语法。\n\n```\n| 水果        | 价格    |  数量  |\n| :--------: | :-----  | :----: |\n| 香蕉        | $1      |   5    |\n| 苹果        | $1      |   6    |\n| 草莓        | $1      |   7    |\n\n```\n这个是md的语法，效果是这样的。\n\n| 水果        | 价格    |  数量   |\n| :--------: | :-----  | :----: |\n| 香蕉        | $1      |   5    |\n| 苹果        | $1      |   6    |\n| 草莓        | $1      |   7    |\n\n但是我的需求是这样的需要可以合并单元格的，最后才知道md暂不支持合并单元格。但是md是支持html的，html当然是支持合并单元格的。所以想要有合并单元格需求的时候，可以使用html来写表格。但是写html的时候也需要到其他的坑。\t\t\n下图为现象\t\t\n![](img/blog-表格/blog-表格-页面.png)\t\t\n下图为html源码\t\t\n![](img/blog-表格/blog-表格-html源码.png)\t\t\n下图为md源码\t\t\n![](img/blog-表格/blog-表格-md源码.png)\n可能是md源码中有**换行符**的问题，导致解析出问题，多了好多`<br>`，我把所有的格式都去掉了，就可以了。\t\n下图为修改完的格式\t\t\n![](img/blog-表格/blog-表格-正确.png)\t\t\n下午为修改后的md源码\t\t\n![](img/blog-表格/blog-表格-正确md源码.png)\n\n\n","source":"_posts/blog-表格.md","raw":"---\ntitle: blog-表格\ndate: 2018-07-07 19:27:38\ntype: \"categories\"\ncategories: blog\ntags: blog\n---\n\n\n### blog-md表格\n\n今天写blog的时候，想写一个表格，就是网上百度了一下，md表格的语法。\n\n```\n| 水果        | 价格    |  数量  |\n| :--------: | :-----  | :----: |\n| 香蕉        | $1      |   5    |\n| 苹果        | $1      |   6    |\n| 草莓        | $1      |   7    |\n\n```\n这个是md的语法，效果是这样的。\n\n| 水果        | 价格    |  数量   |\n| :--------: | :-----  | :----: |\n| 香蕉        | $1      |   5    |\n| 苹果        | $1      |   6    |\n| 草莓        | $1      |   7    |\n\n但是我的需求是这样的需要可以合并单元格的，最后才知道md暂不支持合并单元格。但是md是支持html的，html当然是支持合并单元格的。所以想要有合并单元格需求的时候，可以使用html来写表格。但是写html的时候也需要到其他的坑。\t\t\n下图为现象\t\t\n![](img/blog-表格/blog-表格-页面.png)\t\t\n下图为html源码\t\t\n![](img/blog-表格/blog-表格-html源码.png)\t\t\n下图为md源码\t\t\n![](img/blog-表格/blog-表格-md源码.png)\n可能是md源码中有**换行符**的问题，导致解析出问题，多了好多`<br>`，我把所有的格式都去掉了，就可以了。\t\n下图为修改完的格式\t\t\n![](img/blog-表格/blog-表格-正确.png)\t\t\n下午为修改后的md源码\t\t\n![](img/blog-表格/blog-表格-正确md源码.png)\n\n\n","slug":"blog-表格","published":1,"updated":"2018-08-12T04:04:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkqk7qgg000578b3pzxa16vq","content":"<h3 id=\"blog-md表格\"><a href=\"#blog-md表格\" class=\"headerlink\" title=\"blog-md表格\"></a>blog-md表格</h3><p>今天写blog的时候，想写一个表格，就是网上百度了一下，md表格的语法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 水果        | 价格    |  数量  |</span><br><span class=\"line\">| :--------: | :-----  | :----: |</span><br><span class=\"line\">| 香蕉        | $1      |   5    |</span><br><span class=\"line\">| 苹果        | $1      |   6    |</span><br><span class=\"line\">| 草莓        | $1      |   7    |</span><br></pre></td></tr></table></figure>\n<p>这个是md的语法，效果是这样的。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">水果</th>\n<th style=\"text-align:left\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">香蕉</td>\n<td style=\"text-align:left\">$1</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">苹果</td>\n<td style=\"text-align:left\">$1</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">草莓</td>\n<td style=\"text-align:left\">$1</td>\n<td style=\"text-align:center\">7</td>\n</tr>\n</tbody>\n</table>\n<p>但是我的需求是这样的需要可以合并单元格的，最后才知道md暂不支持合并单元格。但是md是支持html的，html当然是支持合并单元格的。所以想要有合并单元格需求的时候，可以使用html来写表格。但是写html的时候也需要到其他的坑。<br>下图为现象<br><img src=\"img/blog-表格/blog-表格-页面.png\" alt=\"\"><br>下图为html源码<br><img src=\"img/blog-表格/blog-表格-html源码.png\" alt=\"\"><br>下图为md源码<br><img src=\"img/blog-表格/blog-表格-md源码.png\" alt=\"\"><br>可能是md源码中有<strong>换行符</strong>的问题，导致解析出问题，多了好多<code>&lt;br&gt;</code>，我把所有的格式都去掉了，就可以了。<br>下图为修改完的格式<br><img src=\"img/blog-表格/blog-表格-正确.png\" alt=\"\"><br>下午为修改后的md源码<br><img src=\"img/blog-表格/blog-表格-正确md源码.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"blog-md表格\"><a href=\"#blog-md表格\" class=\"headerlink\" title=\"blog-md表格\"></a>blog-md表格</h3><p>今天写blog的时候，想写一个表格，就是网上百度了一下，md表格的语法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 水果        | 价格    |  数量  |</span><br><span class=\"line\">| :--------: | :-----  | :----: |</span><br><span class=\"line\">| 香蕉        | $1      |   5    |</span><br><span class=\"line\">| 苹果        | $1      |   6    |</span><br><span class=\"line\">| 草莓        | $1      |   7    |</span><br></pre></td></tr></table></figure>\n<p>这个是md的语法，效果是这样的。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">水果</th>\n<th style=\"text-align:left\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">香蕉</td>\n<td style=\"text-align:left\">$1</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">苹果</td>\n<td style=\"text-align:left\">$1</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">草莓</td>\n<td style=\"text-align:left\">$1</td>\n<td style=\"text-align:center\">7</td>\n</tr>\n</tbody>\n</table>\n<p>但是我的需求是这样的需要可以合并单元格的，最后才知道md暂不支持合并单元格。但是md是支持html的，html当然是支持合并单元格的。所以想要有合并单元格需求的时候，可以使用html来写表格。但是写html的时候也需要到其他的坑。<br>下图为现象<br><img src=\"img/blog-表格/blog-表格-页面.png\" alt=\"\"><br>下图为html源码<br><img src=\"img/blog-表格/blog-表格-html源码.png\" alt=\"\"><br>下图为md源码<br><img src=\"img/blog-表格/blog-表格-md源码.png\" alt=\"\"><br>可能是md源码中有<strong>换行符</strong>的问题，导致解析出问题，多了好多<code>&lt;br&gt;</code>，我把所有的格式都去掉了，就可以了。<br>下图为修改完的格式<br><img src=\"img/blog-表格/blog-表格-正确.png\" alt=\"\"><br>下午为修改后的md源码<br><img src=\"img/blog-表格/blog-表格-正确md源码.png\" alt=\"\"></p>\n"},{"title":"happen-before","date":"2018-08-12T03:43:44.000Z","type":"categories","_content":"\n\n### heppen-before\n","source":"_posts/happen-before.md","raw":"---\ntitle: happen-before\ndate: 2018-08-12 11:43:44\ntype: \"categories\"\ncategories: jvm\ntags: jvm\n---\n\n\n### heppen-before\n","slug":"happen-before","published":1,"updated":"2018-08-12T03:51:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkqk7qgi000678b3ngccc2od","content":"<h3 id=\"heppen-before\"><a href=\"#heppen-before\" class=\"headerlink\" title=\"heppen-before\"></a>heppen-before</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"heppen-before\"><a href=\"#heppen-before\" class=\"headerlink\" title=\"heppen-before\"></a>heppen-before</h3>"},{"title":"java 8 stream","date":"2018-07-07T08:54:47.000Z","type":"categories","comments":1,"_content":"\n\n### java 8\n\njava 8 中增加很多的新的特性：lambda,stream,函数式编程,新的api。现在java8已经很普及了。工作中也经常用java8：lambda，steam。都是开发中的利器，首先可以增加开发效率，同时也能保证代码的可读性。虽然工作中使用频率还是挺高的，但是比较片面的，最近也是看了一遍《java 8 实战》 这本书，加上自己的一些测试，现在对java 8 的一些新的特性，有了一些更深入的认识。所以，就打算写一遍博客记录下。\n\n\n### lambda\n\nlambda表达式，函数式标称。其实在之前java也是有支持的，但是并不是那么友好，举个栗子：\n<p>java 8之前的版本</p>\n<pre>\n\tRunnable a = new Runnable() {\n        @Override\n        public void run() {\n        \t\tdoSomeThing();\n        }\n    };\n</pre>\n这个是定义接口，重写没有实现的方法，java8中增加了@FunctionalInterface,这样的接口就可以直接使用lambda表达式。\n<p>java8中的lambda写法：</p>\n<pre>\n\tRunnable run = () -> doSomeThing();\n</pre>\n这样，是不是看着很简洁，在了解java8 之前，我很烦java的语法，很冗长，比较喜欢python、golang、js的语法，很简洁。\t\t\nlambda表达式各式如下：\t\t\n**格式**\t\t\n<p></p>\n<pre>\n\t// 无参数,直接用()\n\t() -> {}\n\t// 一个参数，直接指定，不需要带括号\n\t a -> {}\n\t// 多个参数，需要带括号，把所有参数包起来\n\t(a,b,x) -> {}\n\t// 方法只调用一个方法\n\t() -> doSomeThing()\n\t// 方法内部有很多逻辑\n\t() -> {\n\t\tdoSomeThing();\n\t\t// 根据接口方法定义的，是否有返回结果\n\t\treturn someThing;\n\t}\n</pre>\n**注意**\t\t\n1.函数内部调用外部变量，会默认将外部变量设置为final，所以被调用的外部变量一定不能重新覆盖。\t\n2.内存函数的return只是返回内部函数返回，和外层函数无关，在forEach中使用lambda表达式，return 只是返回这次的执行，还会继续执行后面循环。而不是整个方法返回跳出循环。\n\n\n### stream\n\nstream这个是我个人非常喜欢的新特性，一个新的迭代的方式，1.8之前的迭代方式只有两种，一个是for或者增强for，一个是iterator。相较于之前的方式，stream方式处理数据更加灵活。下面介绍下stream处理数据的方式\n<table><tr><td colspan=\"3\" align=\"center\">stream操作</td></tr><tr><td rowspan=\"2\">中间操作</td><td>无状态</td><td>unordered() filter() map() mapToInt() mapToLong() mapToDouble()flatMap() flatMapToInt() flatMapToLong() flatMapToDouble() peek()</td></tr><tr><td>有状态</td><td>distinct() sorted() sorted() limit() skip()</td></tr><tr><td rowspan=\"2\">结束操作</td><td>非短路操作</td><td>forEach() forEachOrdered() toArray() reduce() collect() max() min()count()</td></tr><tr><td>短路操作</td><td>distinct() sorted() sorted() limit() skip()</td></tr></table>\n","source":"_posts/java-8-stream.md","raw":"---\ntitle: java 8 stream\ndate: 2018-07-07 16:54:47\ntype: \"categories\"\ncategories: java8\ncomments: true\ntags: java8\n---\n\n\n### java 8\n\njava 8 中增加很多的新的特性：lambda,stream,函数式编程,新的api。现在java8已经很普及了。工作中也经常用java8：lambda，steam。都是开发中的利器，首先可以增加开发效率，同时也能保证代码的可读性。虽然工作中使用频率还是挺高的，但是比较片面的，最近也是看了一遍《java 8 实战》 这本书，加上自己的一些测试，现在对java 8 的一些新的特性，有了一些更深入的认识。所以，就打算写一遍博客记录下。\n\n\n### lambda\n\nlambda表达式，函数式标称。其实在之前java也是有支持的，但是并不是那么友好，举个栗子：\n<p>java 8之前的版本</p>\n<pre>\n\tRunnable a = new Runnable() {\n        @Override\n        public void run() {\n        \t\tdoSomeThing();\n        }\n    };\n</pre>\n这个是定义接口，重写没有实现的方法，java8中增加了@FunctionalInterface,这样的接口就可以直接使用lambda表达式。\n<p>java8中的lambda写法：</p>\n<pre>\n\tRunnable run = () -> doSomeThing();\n</pre>\n这样，是不是看着很简洁，在了解java8 之前，我很烦java的语法，很冗长，比较喜欢python、golang、js的语法，很简洁。\t\t\nlambda表达式各式如下：\t\t\n**格式**\t\t\n<p></p>\n<pre>\n\t// 无参数,直接用()\n\t() -> {}\n\t// 一个参数，直接指定，不需要带括号\n\t a -> {}\n\t// 多个参数，需要带括号，把所有参数包起来\n\t(a,b,x) -> {}\n\t// 方法只调用一个方法\n\t() -> doSomeThing()\n\t// 方法内部有很多逻辑\n\t() -> {\n\t\tdoSomeThing();\n\t\t// 根据接口方法定义的，是否有返回结果\n\t\treturn someThing;\n\t}\n</pre>\n**注意**\t\t\n1.函数内部调用外部变量，会默认将外部变量设置为final，所以被调用的外部变量一定不能重新覆盖。\t\n2.内存函数的return只是返回内部函数返回，和外层函数无关，在forEach中使用lambda表达式，return 只是返回这次的执行，还会继续执行后面循环。而不是整个方法返回跳出循环。\n\n\n### stream\n\nstream这个是我个人非常喜欢的新特性，一个新的迭代的方式，1.8之前的迭代方式只有两种，一个是for或者增强for，一个是iterator。相较于之前的方式，stream方式处理数据更加灵活。下面介绍下stream处理数据的方式\n<table><tr><td colspan=\"3\" align=\"center\">stream操作</td></tr><tr><td rowspan=\"2\">中间操作</td><td>无状态</td><td>unordered() filter() map() mapToInt() mapToLong() mapToDouble()flatMap() flatMapToInt() flatMapToLong() flatMapToDouble() peek()</td></tr><tr><td>有状态</td><td>distinct() sorted() sorted() limit() skip()</td></tr><tr><td rowspan=\"2\">结束操作</td><td>非短路操作</td><td>forEach() forEachOrdered() toArray() reduce() collect() max() min()count()</td></tr><tr><td>短路操作</td><td>distinct() sorted() sorted() limit() skip()</td></tr></table>\n","slug":"java-8-stream","published":1,"updated":"2018-08-12T04:04:53.000Z","layout":"post","photos":[],"link":"","_id":"cjkqk7qgk000778b3yxu41kab","content":"<h3 id=\"java-8\"><a href=\"#java-8\" class=\"headerlink\" title=\"java 8\"></a>java 8</h3><p>java 8 中增加很多的新的特性：lambda,stream,函数式编程,新的api。现在java8已经很普及了。工作中也经常用java8：lambda，steam。都是开发中的利器，首先可以增加开发效率，同时也能保证代码的可读性。虽然工作中使用频率还是挺高的，但是比较片面的，最近也是看了一遍《java 8 实战》 这本书，加上自己的一些测试，现在对java 8 的一些新的特性，有了一些更深入的认识。所以，就打算写一遍博客记录下。</p>\n<h3 id=\"lambda\"><a href=\"#lambda\" class=\"headerlink\" title=\"lambda\"></a>lambda</h3><p>lambda表达式，函数式标称。其实在之前java也是有支持的，但是并不是那么友好，举个栗子：</p>\n<p></p><p>java 8之前的版本</p><p></p>\n<p><pre><br>    Runnable a = new Runnable() {<br>        @Override<br>        public void run() {<br>                doSomeThing();<br>        }<br>    };<br></pre><br>这个是定义接口，重写没有实现的方法，java8中增加了@FunctionalInterface,这样的接口就可以直接使用lambda表达式。</p>\n<p></p><p>java8中的lambda写法：</p><p></p>\n<p><pre><br>    Runnable run = () -&gt; doSomeThing();<br></pre><br>这样，是不是看着很简洁，在了解java8 之前，我很烦java的语法，很冗长，比较喜欢python、golang、js的语法，很简洁。<br>lambda表达式各式如下：<br><strong>格式</strong>        </p>\n<p></p><p></p><p></p>\n<p><pre><br>    // 无参数,直接用()<br>    () -&gt; {}<br>    // 一个参数，直接指定，不需要带括号<br>     a -&gt; {}<br>    // 多个参数，需要带括号，把所有参数包起来<br>    (a,b,x) -&gt; {}<br>    // 方法只调用一个方法<br>    () -&gt; doSomeThing()<br>    // 方法内部有很多逻辑<br>    () -&gt; {<br>        doSomeThing();<br>        // 根据接口方法定义的，是否有返回结果<br>        return someThing;<br>    }<br></pre><br><strong>注意</strong><br>1.函数内部调用外部变量，会默认将外部变量设置为final，所以被调用的外部变量一定不能重新覆盖。<br>2.内存函数的return只是返回内部函数返回，和外层函数无关，在forEach中使用lambda表达式，return 只是返回这次的执行，还会继续执行后面循环。而不是整个方法返回跳出循环。</p>\n<h3 id=\"stream\"><a href=\"#stream\" class=\"headerlink\" title=\"stream\"></a>stream</h3><p>stream这个是我个人非常喜欢的新特性，一个新的迭代的方式，1.8之前的迭代方式只有两种，一个是for或者增强for，一个是iterator。相较于之前的方式，stream方式处理数据更加灵活。下面介绍下stream处理数据的方式</p>\n<table><tr><td colspan=\"3\" align=\"center\">stream操作</td></tr><tr><td rowspan=\"2\">中间操作</td><td>无状态</td><td>unordered() filter() map() mapToInt() mapToLong() mapToDouble()flatMap() flatMapToInt() flatMapToLong() flatMapToDouble() peek()</td></tr><tr><td>有状态</td><td>distinct() sorted() sorted() limit() skip()</td></tr><tr><td rowspan=\"2\">结束操作</td><td>非短路操作</td><td>forEach() forEachOrdered() toArray() reduce() collect() max() min()count()</td></tr><tr><td>短路操作</td><td>distinct() sorted() sorted() limit() skip()</td></tr></table>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"java-8\"><a href=\"#java-8\" class=\"headerlink\" title=\"java 8\"></a>java 8</h3><p>java 8 中增加很多的新的特性：lambda,stream,函数式编程,新的api。现在java8已经很普及了。工作中也经常用java8：lambda，steam。都是开发中的利器，首先可以增加开发效率，同时也能保证代码的可读性。虽然工作中使用频率还是挺高的，但是比较片面的，最近也是看了一遍《java 8 实战》 这本书，加上自己的一些测试，现在对java 8 的一些新的特性，有了一些更深入的认识。所以，就打算写一遍博客记录下。</p>\n<h3 id=\"lambda\"><a href=\"#lambda\" class=\"headerlink\" title=\"lambda\"></a>lambda</h3><p>lambda表达式，函数式标称。其实在之前java也是有支持的，但是并不是那么友好，举个栗子：</p>\n<p></p><p>java 8之前的版本</p><p></p>\n<p><pre><br>    Runnable a = new Runnable() {<br>        @Override<br>        public void run() {<br>                doSomeThing();<br>        }<br>    };<br></pre><br>这个是定义接口，重写没有实现的方法，java8中增加了@FunctionalInterface,这样的接口就可以直接使用lambda表达式。</p>\n<p></p><p>java8中的lambda写法：</p><p></p>\n<p><pre><br>    Runnable run = () -&gt; doSomeThing();<br></pre><br>这样，是不是看着很简洁，在了解java8 之前，我很烦java的语法，很冗长，比较喜欢python、golang、js的语法，很简洁。<br>lambda表达式各式如下：<br><strong>格式</strong>        </p>\n<p></p><p></p><p></p>\n<p><pre><br>    // 无参数,直接用()<br>    () -&gt; {}<br>    // 一个参数，直接指定，不需要带括号<br>     a -&gt; {}<br>    // 多个参数，需要带括号，把所有参数包起来<br>    (a,b,x) -&gt; {}<br>    // 方法只调用一个方法<br>    () -&gt; doSomeThing()<br>    // 方法内部有很多逻辑<br>    () -&gt; {<br>        doSomeThing();<br>        // 根据接口方法定义的，是否有返回结果<br>        return someThing;<br>    }<br></pre><br><strong>注意</strong><br>1.函数内部调用外部变量，会默认将外部变量设置为final，所以被调用的外部变量一定不能重新覆盖。<br>2.内存函数的return只是返回内部函数返回，和外层函数无关，在forEach中使用lambda表达式，return 只是返回这次的执行，还会继续执行后面循环。而不是整个方法返回跳出循环。</p>\n<h3 id=\"stream\"><a href=\"#stream\" class=\"headerlink\" title=\"stream\"></a>stream</h3><p>stream这个是我个人非常喜欢的新特性，一个新的迭代的方式，1.8之前的迭代方式只有两种，一个是for或者增强for，一个是iterator。相较于之前的方式，stream方式处理数据更加灵活。下面介绍下stream处理数据的方式</p>\n<table><tr><td colspan=\"3\" align=\"center\">stream操作</td></tr><tr><td rowspan=\"2\">中间操作</td><td>无状态</td><td>unordered() filter() map() mapToInt() mapToLong() mapToDouble()flatMap() flatMapToInt() flatMapToLong() flatMapToDouble() peek()</td></tr><tr><td>有状态</td><td>distinct() sorted() sorted() limit() skip()</td></tr><tr><td rowspan=\"2\">结束操作</td><td>非短路操作</td><td>forEach() forEachOrdered() toArray() reduce() collect() max() min()count()</td></tr><tr><td>短路操作</td><td>distinct() sorted() sorted() limit() skip()</td></tr></table>\n"},{"date":"2018-04-16T16:00:00.000Z","title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ndate: 2018-04-17\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-08-12T04:50:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkqk7qgn000b78b3j1efjeiy","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"jvm工具-greys","date":"2018-07-14T02:21:22.000Z","type":"categories","_content":"\n\n### 摘要\t\n\n最近在工作中，出现了一个接口请求时间较长的情况。但是我了解的java自带的工具，并不能很好的显示整个接口耗时的具体情况。最后也是在github上找到了一个阿里大神写的sh脚本，这个脚本，是用java写的，做了很好的classloader的隔离，并且，很轻量，占用资源很少，安装简便，耗时分析更佳之直观。\n\n### 安装步骤\t\n\n1. 首先进入进入安装目录\t\t\n2. 安装\n<pre>\ncurl -sLk http://ompc.oss.aliyuncs.com/greys/install.sh|sh\n</pre>\n3. 开启greys服务\n<pre>\n./greys <PID>[@IP:PORT]\n</pre>\n4. 进入greys服务后，进行想要的操作，greys相关命令：如下\n<table><tbody><tr><td style=\"width: 20%;\">命令</td><td>说明</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#help\">help</a></td><td>查看命令的帮助文档，每个命令和参数都有很详细的说明</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#sc\">sc</a></td><td>查看JVM已加载的类信息</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#sm\">sm</a></td><td>查看已加载的方法信息</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#monitor\">monitor</a></td><td>方法执行监控</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#trace\">trace</a></td><td>渲染方法内部调用路径，并输出方法路径上的每个节点上耗时</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#ptrace\">ptrace</a></td><td>方强化版的trace命令。通过指定渲染路径，并可记录下路径中所有方法的入参、返值；与tt命令联动。</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#watch\">watch</a></td><td>方法执行数据观测</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#tt\">tt</a></td><td>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#stack\">stack</a></td><td>输出当前方法被调用的调用路径</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#version\">version</a></td><td>输出当前目标Java进程所加载的Greys版本号</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#quit\">quit</a></td><td>退出greys客户端</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#shutdown\">shutdown</a></td><td>关闭greys服务端</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#reset\">reset</a></td><td>重置增强类，将被greys增强过的类全部还原</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#jvm\">jvm</a></td><td>查看当前JVM的信息</td></tr></tbody></table>\n\n官方github:https://github.com/oldmanpushcart/greys-anatomy/wiki/Getting-Started","source":"_posts/jvm工具-greys.md","raw":"---\ntitle: jvm工具-greys\ndate: 2018-07-14 10:21:22\ntype: \"categories\"\ncategories: jvm\ntags: jvm\n---\n\n\n### 摘要\t\n\n最近在工作中，出现了一个接口请求时间较长的情况。但是我了解的java自带的工具，并不能很好的显示整个接口耗时的具体情况。最后也是在github上找到了一个阿里大神写的sh脚本，这个脚本，是用java写的，做了很好的classloader的隔离，并且，很轻量，占用资源很少，安装简便，耗时分析更佳之直观。\n\n### 安装步骤\t\n\n1. 首先进入进入安装目录\t\t\n2. 安装\n<pre>\ncurl -sLk http://ompc.oss.aliyuncs.com/greys/install.sh|sh\n</pre>\n3. 开启greys服务\n<pre>\n./greys <PID>[@IP:PORT]\n</pre>\n4. 进入greys服务后，进行想要的操作，greys相关命令：如下\n<table><tbody><tr><td style=\"width: 20%;\">命令</td><td>说明</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#help\">help</a></td><td>查看命令的帮助文档，每个命令和参数都有很详细的说明</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#sc\">sc</a></td><td>查看JVM已加载的类信息</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#sm\">sm</a></td><td>查看已加载的方法信息</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#monitor\">monitor</a></td><td>方法执行监控</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#trace\">trace</a></td><td>渲染方法内部调用路径，并输出方法路径上的每个节点上耗时</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#ptrace\">ptrace</a></td><td>方强化版的trace命令。通过指定渲染路径，并可记录下路径中所有方法的入参、返值；与tt命令联动。</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#watch\">watch</a></td><td>方法执行数据观测</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#tt\">tt</a></td><td>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#stack\">stack</a></td><td>输出当前方法被调用的调用路径</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#version\">version</a></td><td>输出当前目标Java进程所加载的Greys版本号</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#quit\">quit</a></td><td>退出greys客户端</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#shutdown\">shutdown</a></td><td>关闭greys服务端</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#reset\">reset</a></td><td>重置增强类，将被greys增强过的类全部还原</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#jvm\">jvm</a></td><td>查看当前JVM的信息</td></tr></tbody></table>\n\n官方github:https://github.com/oldmanpushcart/greys-anatomy/wiki/Getting-Started","slug":"jvm工具-greys","published":1,"updated":"2018-08-12T04:54:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkqk7qgp000c78b3ywlj71h0","content":"<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>最近在工作中，出现了一个接口请求时间较长的情况。但是我了解的java自带的工具，并不能很好的显示整个接口耗时的具体情况。最后也是在github上找到了一个阿里大神写的sh脚本，这个脚本，是用java写的，做了很好的classloader的隔离，并且，很轻量，占用资源很少，安装简便，耗时分析更佳之直观。</p>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><ol>\n<li>首先进入进入安装目录        </li>\n<li>安装<pre>\ncurl -sLk http://ompc.oss.aliyuncs.com/greys/install.sh|sh\n</pre></li>\n<li>开启greys服务<pre>\n./greys <pid>[@IP:PORT]\n</pid></pre></li>\n<li>进入greys服务后，进行想要的操作，greys相关命令：如下<table><tbody><tr><td style=\"width: 20%;\">命令</td><td>说明</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#help\" target=\"_blank\" rel=\"noopener\">help</a></td><td>查看命令的帮助文档，每个命令和参数都有很详细的说明</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#sc\" target=\"_blank\" rel=\"noopener\">sc</a></td><td>查看JVM已加载的类信息</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#sm\" target=\"_blank\" rel=\"noopener\">sm</a></td><td>查看已加载的方法信息</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#monitor\" target=\"_blank\" rel=\"noopener\">monitor</a></td><td>方法执行监控</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#trace\" target=\"_blank\" rel=\"noopener\">trace</a></td><td>渲染方法内部调用路径，并输出方法路径上的每个节点上耗时</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#ptrace\" target=\"_blank\" rel=\"noopener\">ptrace</a></td><td>方强化版的trace命令。通过指定渲染路径，并可记录下路径中所有方法的入参、返值；与tt命令联动。</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#watch\" target=\"_blank\" rel=\"noopener\">watch</a></td><td>方法执行数据观测</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#tt\" target=\"_blank\" rel=\"noopener\">tt</a></td><td>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#stack\" target=\"_blank\" rel=\"noopener\">stack</a></td><td>输出当前方法被调用的调用路径</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#version\" target=\"_blank\" rel=\"noopener\">version</a></td><td>输出当前目标Java进程所加载的Greys版本号</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#quit\" target=\"_blank\" rel=\"noopener\">quit</a></td><td>退出greys客户端</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#shutdown\" target=\"_blank\" rel=\"noopener\">shutdown</a></td><td>关闭greys服务端</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#reset\" target=\"_blank\" rel=\"noopener\">reset</a></td><td>重置增强类，将被greys增强过的类全部还原</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#jvm\" target=\"_blank\" rel=\"noopener\">jvm</a></td><td>查看当前JVM的信息</td></tr></tbody></table>\n\n</li>\n</ol>\n<p>官方github:<a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Getting-Started\" target=\"_blank\" rel=\"noopener\">https://github.com/oldmanpushcart/greys-anatomy/wiki/Getting-Started</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>最近在工作中，出现了一个接口请求时间较长的情况。但是我了解的java自带的工具，并不能很好的显示整个接口耗时的具体情况。最后也是在github上找到了一个阿里大神写的sh脚本，这个脚本，是用java写的，做了很好的classloader的隔离，并且，很轻量，占用资源很少，安装简便，耗时分析更佳之直观。</p>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><ol>\n<li>首先进入进入安装目录        </li>\n<li>安装<pre>\ncurl -sLk http://ompc.oss.aliyuncs.com/greys/install.sh|sh\n</pre></li>\n<li>开启greys服务<pre>\n./greys <pid>[@IP:PORT]\n</pid></pre></li>\n<li>进入greys服务后，进行想要的操作，greys相关命令：如下<table><tbody><tr><td style=\"width: 20%;\">命令</td><td>说明</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#help\" target=\"_blank\" rel=\"noopener\">help</a></td><td>查看命令的帮助文档，每个命令和参数都有很详细的说明</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#sc\" target=\"_blank\" rel=\"noopener\">sc</a></td><td>查看JVM已加载的类信息</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#sm\" target=\"_blank\" rel=\"noopener\">sm</a></td><td>查看已加载的方法信息</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#monitor\" target=\"_blank\" rel=\"noopener\">monitor</a></td><td>方法执行监控</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#trace\" target=\"_blank\" rel=\"noopener\">trace</a></td><td>渲染方法内部调用路径，并输出方法路径上的每个节点上耗时</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#ptrace\" target=\"_blank\" rel=\"noopener\">ptrace</a></td><td>方强化版的trace命令。通过指定渲染路径，并可记录下路径中所有方法的入参、返值；与tt命令联动。</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#watch\" target=\"_blank\" rel=\"noopener\">watch</a></td><td>方法执行数据观测</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#tt\" target=\"_blank\" rel=\"noopener\">tt</a></td><td>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#stack\" target=\"_blank\" rel=\"noopener\">stack</a></td><td>输出当前方法被调用的调用路径</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#version\" target=\"_blank\" rel=\"noopener\">version</a></td><td>输出当前目标Java进程所加载的Greys版本号</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#quit\" target=\"_blank\" rel=\"noopener\">quit</a></td><td>退出greys客户端</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#shutdown\" target=\"_blank\" rel=\"noopener\">shutdown</a></td><td>关闭greys服务端</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#reset\" target=\"_blank\" rel=\"noopener\">reset</a></td><td>重置增强类，将被greys增强过的类全部还原</td></tr><tr><td><a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#jvm\" target=\"_blank\" rel=\"noopener\">jvm</a></td><td>查看当前JVM的信息</td></tr></tbody></table>\n\n</li>\n</ol>\n<p>官方github:<a href=\"https://github.com/oldmanpushcart/greys-anatomy/wiki/Getting-Started\" target=\"_blank\" rel=\"noopener\">https://github.com/oldmanpushcart/greys-anatomy/wiki/Getting-Started</a></p>\n"},{"title":"java CAS原理","date":"2018-07-22T07:39:37.000Z","type":"categories","_content":"\n\n### 线程安全问题引发的思考\n\njava中线程之间通信的线程安全问题，已经是老生常谈了，有这么几种解决方案：\t\n1. 使用synchronized关键字，但是我们知道这种简单粗暴，但是付出的代价是惨重的，会减低很多性能，其实也是称之为重量级锁。\t\n2. concurrent包中ReentrantLock，实现读写分离，有效的提高了并发，典型的例子：ConcurrentHashMap,就是使用ReentrantLock,加上分段锁的机制，保证了线程安全的前提下，提高了并发。相较于synchronized，更佳轻量\t\t\n3. concurrent包中Atomic类，实现原理，则是使用的CAS，实现的线程安全，本文将主要介绍CAS原理及实现机制。性能相对较高些。\n\n**CAS(compare and swap)比较交换**\t\n用当前内存地址上的值和预期的值比较，若相等，内存更新为新的值，若不相等，不更新。\t\n\t\njava中实现：通过底层计算机的CAS原理，java层面，通过自旋当时方式实现，当前值和预期不一样的时候，采用自旋的方式，直到compare成功，set值，但是这种方式，会占用大量cpu时间，jvm也做了优化，在自旋时降低cpu使用率，在自旋的时候jvm会pause,减低cpu使用率。\n\n\n在自学的过程中，发现，其实java代码，比较简洁，最底层是JNDI的方法，也是多方查找，总算找到了，更低层，实现CAS的原理，下面将详细介绍：\t\n\t\njava中Atomic源码，以AtomicIntger的addAndGet为例\t\t\t\nAtomicInteger包中的addAndGet\n<pre>\npublic final int addAndGet(int delta) {\n    return unsafe.getAndAddInt(this, valueOffset, delta) + delta;\n}\n</pre>\nUnsafe包中getAndAddInt\n<pre>\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n    int var5;\n    do {\n        var5 = this.getIntVolatile(var1, var2);\n    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n    return var5;\n}\n</pre>\n<pre>\npublic final native boolean compareAndSwapInt(Object var1, long var2, \nint var4, int var5);\n</pre>\n在代码中，能看到在java语言方面，是通过自旋的方式，一直循环，直到**compareAndSwapInt**为true为true的时候返回。\t其实最重要是**compareAndSwapInt**这个方法，又干了些什么那，继续谈论。\t\t\n\n其实再底层，就是物理机上做的原子操作，也就是硬件做的优化：\t\n在多处理器环境下，**LOCK#**信号可以确保处理器独占使用某些共享内存。lock 可以被添加在下面的指令前：\t\t\nADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, CMPXCHG16B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG.\t\t\n也就是所有的更新内存地址上数据的操作，通过在 inc 指令前添加 lock 前缀，即可让该指令具备原子性。多个核心同时执行同一条 inc 指令时，会以串行的方式进行，也就避免了上面所说的那种情况。那么这里还有一个问题，lock 前缀是怎样保证核心独占某片内存区域的呢？答案如下：\n\n在 Intel 处理器中，有两种方式保证处理器的某个核心独占某片内存区域。第一种方式是通过锁定总线，让某个核心独占使用总线，但这样代价太大。总线被锁定后，其他核心就不能访问内存了，可能会导致其他核心短时内停止工作。第二种方式是锁定缓存，若某处内存数据被缓存在处理器缓存中。处理器发出的 LOCK# 信号不会锁定总线，而是锁定缓存行对应的内存区域。其他处理器在这片内存区域锁定期间，无法对这片内存区域进行相关操作。相对于锁定总线，锁定缓存的代价明显比较小。\t\t\n\t\n总结下：物理机的cpu发出的指令，现在市面的cpu，根据操作的内存数据的情况，使用总线锁，或者缓存锁。如果是操作的数据是在内存的单行，会使用缓存锁，其他的cpu处理器，还是可以总线和内存交互，性能较高，但是操作的数据不在一个内存的数据较大，在内存地址上的多行，或者操作比较复杂，还是会使用总线锁，其他cpu处理器无法通过总线和内存交互，也就是会影响到其他的处理器的正常工作，性能较差。\n\n再介绍下上面的**总线**，和物理机器结构，和cpu相关的工作流程。\n\n![](img/java-CAS原理/物理机结构.jpg)\n\n总线：图总的**system bus**。cpu和内存传输的桥梁，多核cpu都是通过这一个总线和主内存交互。也是cpu和其他的硬件交互的通道，所以，总线锁，锁住总线，可以实现原子操作，并且因为总线锁，只能一个cpu处理器和内存交互，所以性能也是糟糕的。\n\n参考文章：https://www.cnblogs.com/nullllun/p/9039049.html\n\n\n**CAS缺点**\n\n CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作\n\n1.\tABA问题。因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。\n\t\n\t从Java1.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\t\n\t\n\t关于ABA问题参考文档: http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html\n\n2.\t循环时间长开销大。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。\n\n \n\n3.\t只能保证一个共享变量的原子操作。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j=a，合并一下ij=2a，然后用CAS来操作ij。从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。\n\n","source":"_posts/java-CAS原理.md","raw":"---\ntitle: java CAS原理\ndate: 2018-07-22 15:39:37\ntype: \"categories\"\ncategories: jvm\ntags: jvm\n---\n\n\n### 线程安全问题引发的思考\n\njava中线程之间通信的线程安全问题，已经是老生常谈了，有这么几种解决方案：\t\n1. 使用synchronized关键字，但是我们知道这种简单粗暴，但是付出的代价是惨重的，会减低很多性能，其实也是称之为重量级锁。\t\n2. concurrent包中ReentrantLock，实现读写分离，有效的提高了并发，典型的例子：ConcurrentHashMap,就是使用ReentrantLock,加上分段锁的机制，保证了线程安全的前提下，提高了并发。相较于synchronized，更佳轻量\t\t\n3. concurrent包中Atomic类，实现原理，则是使用的CAS，实现的线程安全，本文将主要介绍CAS原理及实现机制。性能相对较高些。\n\n**CAS(compare and swap)比较交换**\t\n用当前内存地址上的值和预期的值比较，若相等，内存更新为新的值，若不相等，不更新。\t\n\t\njava中实现：通过底层计算机的CAS原理，java层面，通过自旋当时方式实现，当前值和预期不一样的时候，采用自旋的方式，直到compare成功，set值，但是这种方式，会占用大量cpu时间，jvm也做了优化，在自旋时降低cpu使用率，在自旋的时候jvm会pause,减低cpu使用率。\n\n\n在自学的过程中，发现，其实java代码，比较简洁，最底层是JNDI的方法，也是多方查找，总算找到了，更低层，实现CAS的原理，下面将详细介绍：\t\n\t\njava中Atomic源码，以AtomicIntger的addAndGet为例\t\t\t\nAtomicInteger包中的addAndGet\n<pre>\npublic final int addAndGet(int delta) {\n    return unsafe.getAndAddInt(this, valueOffset, delta) + delta;\n}\n</pre>\nUnsafe包中getAndAddInt\n<pre>\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n    int var5;\n    do {\n        var5 = this.getIntVolatile(var1, var2);\n    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n    return var5;\n}\n</pre>\n<pre>\npublic final native boolean compareAndSwapInt(Object var1, long var2, \nint var4, int var5);\n</pre>\n在代码中，能看到在java语言方面，是通过自旋的方式，一直循环，直到**compareAndSwapInt**为true为true的时候返回。\t其实最重要是**compareAndSwapInt**这个方法，又干了些什么那，继续谈论。\t\t\n\n其实再底层，就是物理机上做的原子操作，也就是硬件做的优化：\t\n在多处理器环境下，**LOCK#**信号可以确保处理器独占使用某些共享内存。lock 可以被添加在下面的指令前：\t\t\nADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, CMPXCHG16B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG.\t\t\n也就是所有的更新内存地址上数据的操作，通过在 inc 指令前添加 lock 前缀，即可让该指令具备原子性。多个核心同时执行同一条 inc 指令时，会以串行的方式进行，也就避免了上面所说的那种情况。那么这里还有一个问题，lock 前缀是怎样保证核心独占某片内存区域的呢？答案如下：\n\n在 Intel 处理器中，有两种方式保证处理器的某个核心独占某片内存区域。第一种方式是通过锁定总线，让某个核心独占使用总线，但这样代价太大。总线被锁定后，其他核心就不能访问内存了，可能会导致其他核心短时内停止工作。第二种方式是锁定缓存，若某处内存数据被缓存在处理器缓存中。处理器发出的 LOCK# 信号不会锁定总线，而是锁定缓存行对应的内存区域。其他处理器在这片内存区域锁定期间，无法对这片内存区域进行相关操作。相对于锁定总线，锁定缓存的代价明显比较小。\t\t\n\t\n总结下：物理机的cpu发出的指令，现在市面的cpu，根据操作的内存数据的情况，使用总线锁，或者缓存锁。如果是操作的数据是在内存的单行，会使用缓存锁，其他的cpu处理器，还是可以总线和内存交互，性能较高，但是操作的数据不在一个内存的数据较大，在内存地址上的多行，或者操作比较复杂，还是会使用总线锁，其他cpu处理器无法通过总线和内存交互，也就是会影响到其他的处理器的正常工作，性能较差。\n\n再介绍下上面的**总线**，和物理机器结构，和cpu相关的工作流程。\n\n![](img/java-CAS原理/物理机结构.jpg)\n\n总线：图总的**system bus**。cpu和内存传输的桥梁，多核cpu都是通过这一个总线和主内存交互。也是cpu和其他的硬件交互的通道，所以，总线锁，锁住总线，可以实现原子操作，并且因为总线锁，只能一个cpu处理器和内存交互，所以性能也是糟糕的。\n\n参考文章：https://www.cnblogs.com/nullllun/p/9039049.html\n\n\n**CAS缺点**\n\n CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作\n\n1.\tABA问题。因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。\n\t\n\t从Java1.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\t\n\t\n\t关于ABA问题参考文档: http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html\n\n2.\t循环时间长开销大。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。\n\n \n\n3.\t只能保证一个共享变量的原子操作。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j=a，合并一下ij=2a，然后用CAS来操作ij。从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。\n\n","slug":"java-CAS原理","published":1,"updated":"2018-08-12T04:54:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkqk7qgr000h78b36zy5faq3","content":"<h3 id=\"线程安全问题引发的思考\"><a href=\"#线程安全问题引发的思考\" class=\"headerlink\" title=\"线程安全问题引发的思考\"></a>线程安全问题引发的思考</h3><p>java中线程之间通信的线程安全问题，已经是老生常谈了，有这么几种解决方案：    </p>\n<ol>\n<li>使用synchronized关键字，但是我们知道这种简单粗暴，但是付出的代价是惨重的，会减低很多性能，其实也是称之为重量级锁。    </li>\n<li>concurrent包中ReentrantLock，实现读写分离，有效的提高了并发，典型的例子：ConcurrentHashMap,就是使用ReentrantLock,加上分段锁的机制，保证了线程安全的前提下，提高了并发。相较于synchronized，更佳轻量        </li>\n<li>concurrent包中Atomic类，实现原理，则是使用的CAS，实现的线程安全，本文将主要介绍CAS原理及实现机制。性能相对较高些。</li>\n</ol>\n<p><strong>CAS(compare and swap)比较交换</strong><br>用当前内存地址上的值和预期的值比较，若相等，内存更新为新的值，若不相等，不更新。    </p>\n<p>java中实现：通过底层计算机的CAS原理，java层面，通过自旋当时方式实现，当前值和预期不一样的时候，采用自旋的方式，直到compare成功，set值，但是这种方式，会占用大量cpu时间，jvm也做了优化，在自旋时降低cpu使用率，在自旋的时候jvm会pause,减低cpu使用率。</p>\n<p>在自学的过程中，发现，其实java代码，比较简洁，最底层是JNDI的方法，也是多方查找，总算找到了，更低层，实现CAS的原理，下面将详细介绍：    </p>\n<p>java中Atomic源码，以AtomicIntger的addAndGet为例<br>AtomicInteger包中的addAndGet</p>\n<p><pre><br>public final int addAndGet(int delta) {<br>    return unsafe.getAndAddInt(this, valueOffset, delta) + delta;<br>}<br></pre><br>Unsafe包中getAndAddInt</p>\n<p><pre><br>public final int getAndAddInt(Object var1, long var2, int var4) {<br>    int var5;<br>    do {<br>        var5 = this.getIntVolatile(var1, var2);<br>    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));<br>    return var5;<br>}<br></pre></p>\n<p><pre><br>public final native boolean compareAndSwapInt(Object var1, long var2,<br>int var4, int var5);<br></pre><br>在代码中，能看到在java语言方面，是通过自旋的方式，一直循环，直到<strong>compareAndSwapInt</strong>为true为true的时候返回。    其实最重要是<strong>compareAndSwapInt</strong>这个方法，又干了些什么那，继续谈论。        </p>\n<p>其实再底层，就是物理机上做的原子操作，也就是硬件做的优化：<br>在多处理器环境下，<strong>LOCK#</strong>信号可以确保处理器独占使用某些共享内存。lock 可以被添加在下面的指令前：<br>ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, CMPXCHG16B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG.<br>也就是所有的更新内存地址上数据的操作，通过在 inc 指令前添加 lock 前缀，即可让该指令具备原子性。多个核心同时执行同一条 inc 指令时，会以串行的方式进行，也就避免了上面所说的那种情况。那么这里还有一个问题，lock 前缀是怎样保证核心独占某片内存区域的呢？答案如下：</p>\n<p>在 Intel 处理器中，有两种方式保证处理器的某个核心独占某片内存区域。第一种方式是通过锁定总线，让某个核心独占使用总线，但这样代价太大。总线被锁定后，其他核心就不能访问内存了，可能会导致其他核心短时内停止工作。第二种方式是锁定缓存，若某处内存数据被缓存在处理器缓存中。处理器发出的 LOCK# 信号不会锁定总线，而是锁定缓存行对应的内存区域。其他处理器在这片内存区域锁定期间，无法对这片内存区域进行相关操作。相对于锁定总线，锁定缓存的代价明显比较小。        </p>\n<p>总结下：物理机的cpu发出的指令，现在市面的cpu，根据操作的内存数据的情况，使用总线锁，或者缓存锁。如果是操作的数据是在内存的单行，会使用缓存锁，其他的cpu处理器，还是可以总线和内存交互，性能较高，但是操作的数据不在一个内存的数据较大，在内存地址上的多行，或者操作比较复杂，还是会使用总线锁，其他cpu处理器无法通过总线和内存交互，也就是会影响到其他的处理器的正常工作，性能较差。</p>\n<p>再介绍下上面的<strong>总线</strong>，和物理机器结构，和cpu相关的工作流程。</p>\n<p><img src=\"img/java-CAS原理/物理机结构.jpg\" alt=\"\"></p>\n<p>总线：图总的<strong>system bus</strong>。cpu和内存传输的桥梁，多核cpu都是通过这一个总线和主内存交互。也是cpu和其他的硬件交互的通道，所以，总线锁，锁住总线，可以实现原子操作，并且因为总线锁，只能一个cpu处理器和内存交互，所以性能也是糟糕的。</p>\n<p>参考文章：<a href=\"https://www.cnblogs.com/nullllun/p/9039049.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/nullllun/p/9039049.html</a></p>\n<p><strong>CAS缺点</strong></p>\n<p> CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作</p>\n<ol>\n<li><p>ABA问题。因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。</p>\n<p>从Java1.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。    </p>\n<p>关于ABA问题参考文档: <a href=\"http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html\" target=\"_blank\" rel=\"noopener\">http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html</a></p>\n</li>\n<li><p>循环时间长开销大。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li>只能保证一个共享变量的原子操作。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j=a，合并一下ij=2a，然后用CAS来操作ij。从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"线程安全问题引发的思考\"><a href=\"#线程安全问题引发的思考\" class=\"headerlink\" title=\"线程安全问题引发的思考\"></a>线程安全问题引发的思考</h3><p>java中线程之间通信的线程安全问题，已经是老生常谈了，有这么几种解决方案：    </p>\n<ol>\n<li>使用synchronized关键字，但是我们知道这种简单粗暴，但是付出的代价是惨重的，会减低很多性能，其实也是称之为重量级锁。    </li>\n<li>concurrent包中ReentrantLock，实现读写分离，有效的提高了并发，典型的例子：ConcurrentHashMap,就是使用ReentrantLock,加上分段锁的机制，保证了线程安全的前提下，提高了并发。相较于synchronized，更佳轻量        </li>\n<li>concurrent包中Atomic类，实现原理，则是使用的CAS，实现的线程安全，本文将主要介绍CAS原理及实现机制。性能相对较高些。</li>\n</ol>\n<p><strong>CAS(compare and swap)比较交换</strong><br>用当前内存地址上的值和预期的值比较，若相等，内存更新为新的值，若不相等，不更新。    </p>\n<p>java中实现：通过底层计算机的CAS原理，java层面，通过自旋当时方式实现，当前值和预期不一样的时候，采用自旋的方式，直到compare成功，set值，但是这种方式，会占用大量cpu时间，jvm也做了优化，在自旋时降低cpu使用率，在自旋的时候jvm会pause,减低cpu使用率。</p>\n<p>在自学的过程中，发现，其实java代码，比较简洁，最底层是JNDI的方法，也是多方查找，总算找到了，更低层，实现CAS的原理，下面将详细介绍：    </p>\n<p>java中Atomic源码，以AtomicIntger的addAndGet为例<br>AtomicInteger包中的addAndGet</p>\n<p><pre><br>public final int addAndGet(int delta) {<br>    return unsafe.getAndAddInt(this, valueOffset, delta) + delta;<br>}<br></pre><br>Unsafe包中getAndAddInt</p>\n<p><pre><br>public final int getAndAddInt(Object var1, long var2, int var4) {<br>    int var5;<br>    do {<br>        var5 = this.getIntVolatile(var1, var2);<br>    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));<br>    return var5;<br>}<br></pre></p>\n<p><pre><br>public final native boolean compareAndSwapInt(Object var1, long var2,<br>int var4, int var5);<br></pre><br>在代码中，能看到在java语言方面，是通过自旋的方式，一直循环，直到<strong>compareAndSwapInt</strong>为true为true的时候返回。    其实最重要是<strong>compareAndSwapInt</strong>这个方法，又干了些什么那，继续谈论。        </p>\n<p>其实再底层，就是物理机上做的原子操作，也就是硬件做的优化：<br>在多处理器环境下，<strong>LOCK#</strong>信号可以确保处理器独占使用某些共享内存。lock 可以被添加在下面的指令前：<br>ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, CMPXCHG16B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG.<br>也就是所有的更新内存地址上数据的操作，通过在 inc 指令前添加 lock 前缀，即可让该指令具备原子性。多个核心同时执行同一条 inc 指令时，会以串行的方式进行，也就避免了上面所说的那种情况。那么这里还有一个问题，lock 前缀是怎样保证核心独占某片内存区域的呢？答案如下：</p>\n<p>在 Intel 处理器中，有两种方式保证处理器的某个核心独占某片内存区域。第一种方式是通过锁定总线，让某个核心独占使用总线，但这样代价太大。总线被锁定后，其他核心就不能访问内存了，可能会导致其他核心短时内停止工作。第二种方式是锁定缓存，若某处内存数据被缓存在处理器缓存中。处理器发出的 LOCK# 信号不会锁定总线，而是锁定缓存行对应的内存区域。其他处理器在这片内存区域锁定期间，无法对这片内存区域进行相关操作。相对于锁定总线，锁定缓存的代价明显比较小。        </p>\n<p>总结下：物理机的cpu发出的指令，现在市面的cpu，根据操作的内存数据的情况，使用总线锁，或者缓存锁。如果是操作的数据是在内存的单行，会使用缓存锁，其他的cpu处理器，还是可以总线和内存交互，性能较高，但是操作的数据不在一个内存的数据较大，在内存地址上的多行，或者操作比较复杂，还是会使用总线锁，其他cpu处理器无法通过总线和内存交互，也就是会影响到其他的处理器的正常工作，性能较差。</p>\n<p>再介绍下上面的<strong>总线</strong>，和物理机器结构，和cpu相关的工作流程。</p>\n<p><img src=\"img/java-CAS原理/物理机结构.jpg\" alt=\"\"></p>\n<p>总线：图总的<strong>system bus</strong>。cpu和内存传输的桥梁，多核cpu都是通过这一个总线和主内存交互。也是cpu和其他的硬件交互的通道，所以，总线锁，锁住总线，可以实现原子操作，并且因为总线锁，只能一个cpu处理器和内存交互，所以性能也是糟糕的。</p>\n<p>参考文章：<a href=\"https://www.cnblogs.com/nullllun/p/9039049.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/nullllun/p/9039049.html</a></p>\n<p><strong>CAS缺点</strong></p>\n<p> CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作</p>\n<ol>\n<li><p>ABA问题。因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。</p>\n<p>从Java1.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。    </p>\n<p>关于ABA问题参考文档: <a href=\"http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html\" target=\"_blank\" rel=\"noopener\">http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html</a></p>\n</li>\n<li><p>循环时间长开销大。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li>只能保证一个共享变量的原子操作。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j=a，合并一下ij=2a，然后用CAS来操作ij。从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。</li>\n</ol>\n"},{"title":"volatile关键字","date":"2018-08-12T04:55:25.000Z","type":"categories","_content":"","source":"_posts/volatile关键字.md","raw":"---\ntitle: volatile关键字\ndate: 2018-08-12 12:55:25\ntype: \"categories\"\ncategories: jvm\ntags: jvm\n---\n","slug":"volatile关键字","published":1,"updated":"2018-08-12T04:56:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkqk7qgu000i78b309kvuso0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"设计模式-原型【Prototype】","date":"2018-08-04T12:32:01.000Z","type":"categories","_content":"\n\n### 介绍\n原型设计模式，还是挺重要的，在日常开发中，可能经常用到，但是我们都没有注意，或者是有些应该用原型而没有用。**圆形设计模式主要是通过复制的方式生成实力。**\n\n\n### 应用场景\n\n\n### UML\n\n![](img/设计模式-原型Prototype/UML.png)\n\n\n### 方法说明\n\nPrototype(原型接口)：原型接口，用于定义原型类对象，定义clone方法，子类实现clone方法，接口对外提供clone方法。\t\t\nConcretePrototype(具体实现类)：实现Prototype接口，并且**实现**clone方法。\t\nClient(客户端)：client通过接口调用clone，复制生成新的对象。\n\n\n### 优缺点\n* 优点\n* 缺点\n\n\n### 拓展型\n完全和客户端解耦，client只是调用，并不需要关心，原型类对象的内部实现。并且，都是在单个对象中定义。指责单一。\n\n\n\n### 实例\n\n\n**代码地址**:\n\n\n\n\n\n\n\n","source":"_posts/设计模式-原型【Prototype】.md","raw":"---\ntitle: 设计模式-原型【Prototype】\ndate: 2018-08-04 20:32:01\ntype: \"categories\"\ncategories: 设计模式\ntags: 设计模式\n---\n\n\n### 介绍\n原型设计模式，还是挺重要的，在日常开发中，可能经常用到，但是我们都没有注意，或者是有些应该用原型而没有用。**圆形设计模式主要是通过复制的方式生成实力。**\n\n\n### 应用场景\n\n\n### UML\n\n![](img/设计模式-原型Prototype/UML.png)\n\n\n### 方法说明\n\nPrototype(原型接口)：原型接口，用于定义原型类对象，定义clone方法，子类实现clone方法，接口对外提供clone方法。\t\t\nConcretePrototype(具体实现类)：实现Prototype接口，并且**实现**clone方法。\t\nClient(客户端)：client通过接口调用clone，复制生成新的对象。\n\n\n### 优缺点\n* 优点\n* 缺点\n\n\n### 拓展型\n完全和客户端解耦，client只是调用，并不需要关心，原型类对象的内部实现。并且，都是在单个对象中定义。指责单一。\n\n\n\n### 实例\n\n\n**代码地址**:\n\n\n\n\n\n\n\n","slug":"设计模式-原型【Prototype】","published":1,"updated":"2018-08-12T04:04:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkqk7qgx000n78b39q2qmrov","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>原型设计模式，还是挺重要的，在日常开发中，可能经常用到，但是我们都没有注意，或者是有些应该用原型而没有用。<strong>圆形设计模式主要是通过复制的方式生成实力。</strong></p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h3 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h3><p><img src=\"img/设计模式-原型Prototype/UML.png\" alt=\"\"></p>\n<h3 id=\"方法说明\"><a href=\"#方法说明\" class=\"headerlink\" title=\"方法说明\"></a>方法说明</h3><p>Prototype(原型接口)：原型接口，用于定义原型类对象，定义clone方法，子类实现clone方法，接口对外提供clone方法。<br>ConcretePrototype(具体实现类)：实现Prototype接口，并且<strong>实现</strong>clone方法。<br>Client(客户端)：client通过接口调用clone，复制生成新的对象。</p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li>优点</li>\n<li>缺点</li>\n</ul>\n<h3 id=\"拓展型\"><a href=\"#拓展型\" class=\"headerlink\" title=\"拓展型\"></a>拓展型</h3><p>完全和客户端解耦，client只是调用，并不需要关心，原型类对象的内部实现。并且，都是在单个对象中定义。指责单一。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p><strong>代码地址</strong>:</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>原型设计模式，还是挺重要的，在日常开发中，可能经常用到，但是我们都没有注意，或者是有些应该用原型而没有用。<strong>圆形设计模式主要是通过复制的方式生成实力。</strong></p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h3 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h3><p><img src=\"img/设计模式-原型Prototype/UML.png\" alt=\"\"></p>\n<h3 id=\"方法说明\"><a href=\"#方法说明\" class=\"headerlink\" title=\"方法说明\"></a>方法说明</h3><p>Prototype(原型接口)：原型接口，用于定义原型类对象，定义clone方法，子类实现clone方法，接口对外提供clone方法。<br>ConcretePrototype(具体实现类)：实现Prototype接口，并且<strong>实现</strong>clone方法。<br>Client(客户端)：client通过接口调用clone，复制生成新的对象。</p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li>优点</li>\n<li>缺点</li>\n</ul>\n<h3 id=\"拓展型\"><a href=\"#拓展型\" class=\"headerlink\" title=\"拓展型\"></a>拓展型</h3><p>完全和客户端解耦，client只是调用，并不需要关心，原型类对象的内部实现。并且，都是在单个对象中定义。指责单一。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p><strong>代码地址</strong>:</p>\n"},{"title":"设计模式-模版【Tempalte Method】","date":"2018-06-09T01:08:35.000Z","type":"categories","_content":"\n\n### 介绍\n设计模式中，模版设计模式，在日常的开发中，是比较常用的了。很好的复合了**ocp**(Open Closed Principle)，通过继承的方式，客户端重写**抽象方法**和**钩子方法**，实现自己的业务，很好的拓展性。我刚刚开始接触的时候对这个钩子方法也是很迷惑，在下面讲整个结构的时候，会详细的讲解钩子函数。\n\n\n### 应用场景\n\n\n### UML\n\n![](img/设计模式-模版方法Template/模版设计模式UML.png)\n\n\n### 方法说明\t\n\n模版方法(main):模版方法，客户端调用的主要方法。\t\t\n抽象方法(concreteMethod):子类提供具体业务实现。\t\t\n勾子方法(hookMethod):父类中提供默认空实现，并且这个方法会在**模版方法**调用，子类可以重写也可以不用重写。\n\n\n### 使用\t\n\n父类：定义模版方法，并且定义抽象方法和钩子方法。\t\t\n子类：根据具体的业务需要重写抽象方法。也可以根据具体的业务场景，重写钩子方法。当然也不可以重写钩子方法。也可以业务定义新的方法。\t\t\n客户端(client)：调用时候主要是调用**模版方法**。\n\n\n### 优缺点\n* 优点：\n* 缺点：\n\n\n### 拓展性\n具有很好的拓展型，根据不同的业务定义不同的子类。\n\n\n### 实例\n\n\n**源码地址**：\n\n","source":"_posts/设计模式-模版【Tempalte Method】.md","raw":"---\ntitle: 设计模式-模版【Tempalte Method】\ndate: 2018-06-09 09:08:35\ntype: \"categories\"\ncategories: 设计模式\ntags: 设计模式\n---\n\n\n### 介绍\n设计模式中，模版设计模式，在日常的开发中，是比较常用的了。很好的复合了**ocp**(Open Closed Principle)，通过继承的方式，客户端重写**抽象方法**和**钩子方法**，实现自己的业务，很好的拓展性。我刚刚开始接触的时候对这个钩子方法也是很迷惑，在下面讲整个结构的时候，会详细的讲解钩子函数。\n\n\n### 应用场景\n\n\n### UML\n\n![](img/设计模式-模版方法Template/模版设计模式UML.png)\n\n\n### 方法说明\t\n\n模版方法(main):模版方法，客户端调用的主要方法。\t\t\n抽象方法(concreteMethod):子类提供具体业务实现。\t\t\n勾子方法(hookMethod):父类中提供默认空实现，并且这个方法会在**模版方法**调用，子类可以重写也可以不用重写。\n\n\n### 使用\t\n\n父类：定义模版方法，并且定义抽象方法和钩子方法。\t\t\n子类：根据具体的业务需要重写抽象方法。也可以根据具体的业务场景，重写钩子方法。当然也不可以重写钩子方法。也可以业务定义新的方法。\t\t\n客户端(client)：调用时候主要是调用**模版方法**。\n\n\n### 优缺点\n* 优点：\n* 缺点：\n\n\n### 拓展性\n具有很好的拓展型，根据不同的业务定义不同的子类。\n\n\n### 实例\n\n\n**源码地址**：\n\n","slug":"设计模式-模版【Tempalte Method】","published":1,"updated":"2018-08-12T04:04:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkqk7qgy000o78b32c4rgs4k","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>设计模式中，模版设计模式，在日常的开发中，是比较常用的了。很好的复合了<strong>ocp</strong>(Open Closed Principle)，通过继承的方式，客户端重写<strong>抽象方法</strong>和<strong>钩子方法</strong>，实现自己的业务，很好的拓展性。我刚刚开始接触的时候对这个钩子方法也是很迷惑，在下面讲整个结构的时候，会详细的讲解钩子函数。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h3 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h3><p><img src=\"img/设计模式-模版方法Template/模版设计模式UML.png\" alt=\"\"></p>\n<h3 id=\"方法说明\"><a href=\"#方法说明\" class=\"headerlink\" title=\"方法说明\"></a>方法说明</h3><p>模版方法(main):模版方法，客户端调用的主要方法。<br>抽象方法(concreteMethod):子类提供具体业务实现。<br>勾子方法(hookMethod):父类中提供默认空实现，并且这个方法会在<strong>模版方法</strong>调用，子类可以重写也可以不用重写。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>父类：定义模版方法，并且定义抽象方法和钩子方法。<br>子类：根据具体的业务需要重写抽象方法。也可以根据具体的业务场景，重写钩子方法。当然也不可以重写钩子方法。也可以业务定义新的方法。<br>客户端(client)：调用时候主要是调用<strong>模版方法</strong>。</p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li>优点：</li>\n<li>缺点：</li>\n</ul>\n<h3 id=\"拓展性\"><a href=\"#拓展性\" class=\"headerlink\" title=\"拓展性\"></a>拓展性</h3><p>具有很好的拓展型，根据不同的业务定义不同的子类。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p><strong>源码地址</strong>：</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>设计模式中，模版设计模式，在日常的开发中，是比较常用的了。很好的复合了<strong>ocp</strong>(Open Closed Principle)，通过继承的方式，客户端重写<strong>抽象方法</strong>和<strong>钩子方法</strong>，实现自己的业务，很好的拓展性。我刚刚开始接触的时候对这个钩子方法也是很迷惑，在下面讲整个结构的时候，会详细的讲解钩子函数。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h3 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h3><p><img src=\"img/设计模式-模版方法Template/模版设计模式UML.png\" alt=\"\"></p>\n<h3 id=\"方法说明\"><a href=\"#方法说明\" class=\"headerlink\" title=\"方法说明\"></a>方法说明</h3><p>模版方法(main):模版方法，客户端调用的主要方法。<br>抽象方法(concreteMethod):子类提供具体业务实现。<br>勾子方法(hookMethod):父类中提供默认空实现，并且这个方法会在<strong>模版方法</strong>调用，子类可以重写也可以不用重写。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>父类：定义模版方法，并且定义抽象方法和钩子方法。<br>子类：根据具体的业务需要重写抽象方法。也可以根据具体的业务场景，重写钩子方法。当然也不可以重写钩子方法。也可以业务定义新的方法。<br>客户端(client)：调用时候主要是调用<strong>模版方法</strong>。</p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li>优点：</li>\n<li>缺点：</li>\n</ul>\n<h3 id=\"拓展性\"><a href=\"#拓展性\" class=\"headerlink\" title=\"拓展性\"></a>拓展性</h3><p>具有很好的拓展型，根据不同的业务定义不同的子类。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p><strong>源码地址</strong>：</p>\n"},{"title":"逃逸分析和栈上分配","date":"2018-08-12T03:43:13.000Z","type":"categories","_content":"\n\n### 逃逸分析和栈上分配\n","source":"_posts/逃逸分析和栈上分配.md","raw":"---\ntitle: 逃逸分析和栈上分配\ndate: 2018-08-12 11:43:13\ntype: \"categories\"\ncategories: jvm\ntags: jvm\n---\n\n\n### 逃逸分析和栈上分配\n","slug":"逃逸分析和栈上分配","published":1,"updated":"2018-08-12T03:50:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkqk7qh0000s78b3o1o1jamb","content":"<h3 id=\"逃逸分析和栈上分配\"><a href=\"#逃逸分析和栈上分配\" class=\"headerlink\" title=\"逃逸分析和栈上分配\"></a>逃逸分析和栈上分配</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"逃逸分析和栈上分配\"><a href=\"#逃逸分析和栈上分配\" class=\"headerlink\" title=\"逃逸分析和栈上分配\"></a>逃逸分析和栈上分配</h3>"},{"title":"设计模式-适配器【Adapter】","date":"2018-08-12T07:20:10.000Z","type":"categories","_content":"\n\n### 介绍\n适配器，在日常开发中还是挺常用的。现在的编程都是面上接口编程，所以，在拓展的时候，一个接口调用另外一个接口的时候，可能就会存在不匹配的时候，那就可以使用适配模式，增加一层适配器，去适配两个接口，这样两个就接口就能正常调用了。\n\n适配器模式有三种：类适配器、对象适配器、接口适配器\n\n\n### 应用场景\n\n主要是应用两个接口不兼容，在两个接口之间做一层适配，让两个接口能够正常工作。\n\n\n### UML\n\n![](img/设计模式-适配器Adapter/UML.png)\n\n\n### 方法说明\t\n\n* client：客户端，调用者。\n* target：目标接口。\n* adapter：适配器，适配，target中的方法，和adaptee中的方法。\n* adaptee：被适配的类或对象或接口。\n\n\n### 使用\t\n\n* 类适配器：adapter **继承** adaptee 中的方法和 **实现** target 中的目标方式，实现的方法中调用adaptee中的方法，从而达到适配的效果。\n* 对象适配器：通过 **构造器** 持有 adaptee 的对象实实例，在实现 target 方法中调用实例的方法，实现适配的效果。\n* 接口适配器：通过 **抽象类** 对 adaptee 默认空实现，在 **继承** abstarctAdapter，在实现 target 中要用到的方法，而不是实现全部的方法，从而达到适配，是组件之间解耦。\t\n\n**注**：接口适配器，并不常用，因为正常接口定义应该符合单一职责原则，并且通过组合的方式，实现不同的功能。所以接口这种用的较少。个人理解，比较鸡肋，但是看到别人有做，就也写上了。主要是类的适配和对象的适配。\n\n\n### 优缺点\n\n保证了client不需要做任何修改，被适配的接口，需要不要修改，保证了开闭原则，并且对源码没有入侵。很好的解耦。\n\n### 拓展性\n\n良好\n\n\n### 个人\n\nquestion：前一阵，在开发中就发现，一个方法要调用另外的一个方法的时候，需要异步调用，可以直接在那个被调用的方法上直接用@Async就能搞定，但是有一个问题，所做的业务同样的方法需要同步调用，和异步调用，直接调用的话，就不能用@Async标注的方法，用原有的方式就需要写两套代码，一套同步，一套异步。\n\nsolution：我就在单独抽象了一个方法，加上@Async注解，通过反射的方式调用。很好的实现了解耦。\t\t\n同步调用：直接调用被调用方法即可。\t\t\n异步调用：将要调用目标方法的 **类名** ， **方法名** ，**参数** 传入，通过spring的反射调用被调用方法。\t\t\n\n\t\t\n\n\n**源码地址**：\n<a>https://github.com/wangypeng/java-design-mode-source/tree/master/adapter</a>","source":"_posts/设计模式-适配器【Adapter】.md","raw":"---\ntitle: 设计模式-适配器【Adapter】\ndate: 2018-08-12 15:20:10\ntype: \"categories\"\ncategories: 设计模式\ntags: 设计模式\n---\n\n\n### 介绍\n适配器，在日常开发中还是挺常用的。现在的编程都是面上接口编程，所以，在拓展的时候，一个接口调用另外一个接口的时候，可能就会存在不匹配的时候，那就可以使用适配模式，增加一层适配器，去适配两个接口，这样两个就接口就能正常调用了。\n\n适配器模式有三种：类适配器、对象适配器、接口适配器\n\n\n### 应用场景\n\n主要是应用两个接口不兼容，在两个接口之间做一层适配，让两个接口能够正常工作。\n\n\n### UML\n\n![](img/设计模式-适配器Adapter/UML.png)\n\n\n### 方法说明\t\n\n* client：客户端，调用者。\n* target：目标接口。\n* adapter：适配器，适配，target中的方法，和adaptee中的方法。\n* adaptee：被适配的类或对象或接口。\n\n\n### 使用\t\n\n* 类适配器：adapter **继承** adaptee 中的方法和 **实现** target 中的目标方式，实现的方法中调用adaptee中的方法，从而达到适配的效果。\n* 对象适配器：通过 **构造器** 持有 adaptee 的对象实实例，在实现 target 方法中调用实例的方法，实现适配的效果。\n* 接口适配器：通过 **抽象类** 对 adaptee 默认空实现，在 **继承** abstarctAdapter，在实现 target 中要用到的方法，而不是实现全部的方法，从而达到适配，是组件之间解耦。\t\n\n**注**：接口适配器，并不常用，因为正常接口定义应该符合单一职责原则，并且通过组合的方式，实现不同的功能。所以接口这种用的较少。个人理解，比较鸡肋，但是看到别人有做，就也写上了。主要是类的适配和对象的适配。\n\n\n### 优缺点\n\n保证了client不需要做任何修改，被适配的接口，需要不要修改，保证了开闭原则，并且对源码没有入侵。很好的解耦。\n\n### 拓展性\n\n良好\n\n\n### 个人\n\nquestion：前一阵，在开发中就发现，一个方法要调用另外的一个方法的时候，需要异步调用，可以直接在那个被调用的方法上直接用@Async就能搞定，但是有一个问题，所做的业务同样的方法需要同步调用，和异步调用，直接调用的话，就不能用@Async标注的方法，用原有的方式就需要写两套代码，一套同步，一套异步。\n\nsolution：我就在单独抽象了一个方法，加上@Async注解，通过反射的方式调用。很好的实现了解耦。\t\t\n同步调用：直接调用被调用方法即可。\t\t\n异步调用：将要调用目标方法的 **类名** ， **方法名** ，**参数** 传入，通过spring的反射调用被调用方法。\t\t\n\n\t\t\n\n\n**源码地址**：\n<a>https://github.com/wangypeng/java-design-mode-source/tree/master/adapter</a>","slug":"设计模式-适配器【Adapter】","published":1,"updated":"2018-08-12T07:56:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkqk7qmb001j78b3te0358um","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>适配器，在日常开发中还是挺常用的。现在的编程都是面上接口编程，所以，在拓展的时候，一个接口调用另外一个接口的时候，可能就会存在不匹配的时候，那就可以使用适配模式，增加一层适配器，去适配两个接口，这样两个就接口就能正常调用了。</p>\n<p>适配器模式有三种：类适配器、对象适配器、接口适配器</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>主要是应用两个接口不兼容，在两个接口之间做一层适配，让两个接口能够正常工作。</p>\n<h3 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h3><p><img src=\"img/设计模式-适配器Adapter/UML.png\" alt=\"\"></p>\n<h3 id=\"方法说明\"><a href=\"#方法说明\" class=\"headerlink\" title=\"方法说明\"></a>方法说明</h3><ul>\n<li>client：客户端，调用者。</li>\n<li>target：目标接口。</li>\n<li>adapter：适配器，适配，target中的方法，和adaptee中的方法。</li>\n<li>adaptee：被适配的类或对象或接口。</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li>类适配器：adapter <strong>继承</strong> adaptee 中的方法和 <strong>实现</strong> target 中的目标方式，实现的方法中调用adaptee中的方法，从而达到适配的效果。</li>\n<li>对象适配器：通过 <strong>构造器</strong> 持有 adaptee 的对象实实例，在实现 target 方法中调用实例的方法，实现适配的效果。</li>\n<li>接口适配器：通过 <strong>抽象类</strong> 对 adaptee 默认空实现，在 <strong>继承</strong> abstarctAdapter，在实现 target 中要用到的方法，而不是实现全部的方法，从而达到适配，是组件之间解耦。    </li>\n</ul>\n<p><strong>注</strong>：接口适配器，并不常用，因为正常接口定义应该符合单一职责原则，并且通过组合的方式，实现不同的功能。所以接口这种用的较少。个人理解，比较鸡肋，但是看到别人有做，就也写上了。主要是类的适配和对象的适配。</p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><p>保证了client不需要做任何修改，被适配的接口，需要不要修改，保证了开闭原则，并且对源码没有入侵。很好的解耦。</p>\n<h3 id=\"拓展性\"><a href=\"#拓展性\" class=\"headerlink\" title=\"拓展性\"></a>拓展性</h3><p>良好</p>\n<h3 id=\"个人\"><a href=\"#个人\" class=\"headerlink\" title=\"个人\"></a>个人</h3><p>question：前一阵，在开发中就发现，一个方法要调用另外的一个方法的时候，需要异步调用，可以直接在那个被调用的方法上直接用@Async就能搞定，但是有一个问题，所做的业务同样的方法需要同步调用，和异步调用，直接调用的话，就不能用@Async标注的方法，用原有的方式就需要写两套代码，一套同步，一套异步。</p>\n<p>solution：我就在单独抽象了一个方法，加上@Async注解，通过反射的方式调用。很好的实现了解耦。<br>同步调用：直接调用被调用方法即可。<br>异步调用：将要调用目标方法的 <strong>类名</strong> ， <strong>方法名</strong> ，<strong>参数</strong> 传入，通过spring的反射调用被调用方法。        </p>\n<p><strong>源码地址</strong>：<br><a><a href=\"https://github.com/wangypeng/java-design-mode-source/tree/master/adapter\" target=\"_blank\" rel=\"noopener\">https://github.com/wangypeng/java-design-mode-source/tree/master/adapter</a></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>适配器，在日常开发中还是挺常用的。现在的编程都是面上接口编程，所以，在拓展的时候，一个接口调用另外一个接口的时候，可能就会存在不匹配的时候，那就可以使用适配模式，增加一层适配器，去适配两个接口，这样两个就接口就能正常调用了。</p>\n<p>适配器模式有三种：类适配器、对象适配器、接口适配器</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>主要是应用两个接口不兼容，在两个接口之间做一层适配，让两个接口能够正常工作。</p>\n<h3 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h3><p><img src=\"img/设计模式-适配器Adapter/UML.png\" alt=\"\"></p>\n<h3 id=\"方法说明\"><a href=\"#方法说明\" class=\"headerlink\" title=\"方法说明\"></a>方法说明</h3><ul>\n<li>client：客户端，调用者。</li>\n<li>target：目标接口。</li>\n<li>adapter：适配器，适配，target中的方法，和adaptee中的方法。</li>\n<li>adaptee：被适配的类或对象或接口。</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li>类适配器：adapter <strong>继承</strong> adaptee 中的方法和 <strong>实现</strong> target 中的目标方式，实现的方法中调用adaptee中的方法，从而达到适配的效果。</li>\n<li>对象适配器：通过 <strong>构造器</strong> 持有 adaptee 的对象实实例，在实现 target 方法中调用实例的方法，实现适配的效果。</li>\n<li>接口适配器：通过 <strong>抽象类</strong> 对 adaptee 默认空实现，在 <strong>继承</strong> abstarctAdapter，在实现 target 中要用到的方法，而不是实现全部的方法，从而达到适配，是组件之间解耦。    </li>\n</ul>\n<p><strong>注</strong>：接口适配器，并不常用，因为正常接口定义应该符合单一职责原则，并且通过组合的方式，实现不同的功能。所以接口这种用的较少。个人理解，比较鸡肋，但是看到别人有做，就也写上了。主要是类的适配和对象的适配。</p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><p>保证了client不需要做任何修改，被适配的接口，需要不要修改，保证了开闭原则，并且对源码没有入侵。很好的解耦。</p>\n<h3 id=\"拓展性\"><a href=\"#拓展性\" class=\"headerlink\" title=\"拓展性\"></a>拓展性</h3><p>良好</p>\n<h3 id=\"个人\"><a href=\"#个人\" class=\"headerlink\" title=\"个人\"></a>个人</h3><p>question：前一阵，在开发中就发现，一个方法要调用另外的一个方法的时候，需要异步调用，可以直接在那个被调用的方法上直接用@Async就能搞定，但是有一个问题，所做的业务同样的方法需要同步调用，和异步调用，直接调用的话，就不能用@Async标注的方法，用原有的方式就需要写两套代码，一套同步，一套异步。</p>\n<p>solution：我就在单独抽象了一个方法，加上@Async注解，通过反射的方式调用。很好的实现了解耦。<br>同步调用：直接调用被调用方法即可。<br>异步调用：将要调用目标方法的 <strong>类名</strong> ， <strong>方法名</strong> ，<strong>参数</strong> 传入，通过spring的反射调用被调用方法。        </p>\n<p><strong>源码地址</strong>：<br><a><a href=\"https://github.com/wangypeng/java-design-mode-source/tree/master/adapter\" target=\"_blank\" rel=\"noopener\">https://github.com/wangypeng/java-design-mode-source/tree/master/adapter</a></a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjkqk7qg5000078b3ztvzu4tr","category_id":"cjkqk7qge000378b31vlvp0iy","_id":"cjkqk7qgq000e78b3rv7ijxv9"},{"post_id":"cjkqk7qgb000278b3cnf6vfmo","category_id":"cjkqk7qge000378b31vlvp0iy","_id":"cjkqk7qgw000k78b3erz4att4"},{"post_id":"cjkqk7qgg000578b3pzxa16vq","category_id":"cjkqk7qge000378b31vlvp0iy","_id":"cjkqk7qgz000p78b3w2fokqu9"},{"post_id":"cjkqk7qgi000678b3ngccc2od","category_id":"cjkqk7qgw000j78b3r409fmte","_id":"cjkqk7qh1000u78b3vt14c5ps"},{"post_id":"cjkqk7qh0000s78b3o1o1jamb","category_id":"cjkqk7qgw000j78b3r409fmte","_id":"cjkqk7qh2000z78b3aqjz7bnq"},{"post_id":"cjkqk7qgk000778b3yxu41kab","category_id":"cjkqk7qgz000q78b3a7cdrsvs","_id":"cjkqk7qh3001278b3gehiqvap"},{"post_id":"cjkqk7qgp000c78b3ywlj71h0","category_id":"cjkqk7qgw000j78b3r409fmte","_id":"cjkqk7qh4001578b3ugdy8wfj"},{"post_id":"cjkqk7qgr000h78b36zy5faq3","category_id":"cjkqk7qgw000j78b3r409fmte","_id":"cjkqk7qh6001978b3d6zap6jk"},{"post_id":"cjkqk7qgu000i78b309kvuso0","category_id":"cjkqk7qgw000j78b3r409fmte","_id":"cjkqk7qh6001c78b3cjaef2u5"},{"post_id":"cjkqk7qgx000n78b39q2qmrov","category_id":"cjkqk7qh5001878b34hwpuavg","_id":"cjkqk7qh7001g78b3z8z33xad"},{"post_id":"cjkqk7qgy000o78b32c4rgs4k","category_id":"cjkqk7qh5001878b34hwpuavg","_id":"cjkqk7qh7001i78b3zco5tta0"},{"post_id":"cjkqk7qmb001j78b3te0358um","category_id":"cjkqk7qh5001878b34hwpuavg","_id":"cjkqk7qmh001m78b3pale0vpq"}],"PostTag":[{"post_id":"cjkqk7qg5000078b3ztvzu4tr","tag_id":"cjkqk7qgg000478b3fi3klrwt","_id":"cjkqk7qgn000a78b33xm0i2sy"},{"post_id":"cjkqk7qgb000278b3cnf6vfmo","tag_id":"cjkqk7qgg000478b3fi3klrwt","_id":"cjkqk7qgr000g78b3v909o55j"},{"post_id":"cjkqk7qgg000578b3pzxa16vq","tag_id":"cjkqk7qgg000478b3fi3klrwt","_id":"cjkqk7qgx000m78b3nrsophqs"},{"post_id":"cjkqk7qgi000678b3ngccc2od","tag_id":"cjkqk7qgw000l78b3ivv6hqhg","_id":"cjkqk7qh1000t78b3cedgvuei"},{"post_id":"cjkqk7qh0000s78b3o1o1jamb","tag_id":"cjkqk7qgw000l78b3ivv6hqhg","_id":"cjkqk7qh1000x78b32uxcdg58"},{"post_id":"cjkqk7qgk000778b3yxu41kab","tag_id":"cjkqk7qgz000r78b3nco6lfub","_id":"cjkqk7qh2000y78b3xsgbi36k"},{"post_id":"cjkqk7qgp000c78b3ywlj71h0","tag_id":"cjkqk7qgw000l78b3ivv6hqhg","_id":"cjkqk7qh3001378b35sr3xhs2"},{"post_id":"cjkqk7qgr000h78b36zy5faq3","tag_id":"cjkqk7qgw000l78b3ivv6hqhg","_id":"cjkqk7qh5001778b33w08v81c"},{"post_id":"cjkqk7qgu000i78b309kvuso0","tag_id":"cjkqk7qgw000l78b3ivv6hqhg","_id":"cjkqk7qh6001b78b30k70i57e"},{"post_id":"cjkqk7qgx000n78b39q2qmrov","tag_id":"cjkqk7qh6001a78b36zuhanud","_id":"cjkqk7qh7001f78b37tcnegai"},{"post_id":"cjkqk7qgy000o78b32c4rgs4k","tag_id":"cjkqk7qh6001a78b36zuhanud","_id":"cjkqk7qh7001h78b3q7353ych"},{"post_id":"cjkqk7qmb001j78b3te0358um","tag_id":"cjkqk7qh6001a78b36zuhanud","_id":"cjkqk7qmg001l78b3lousrza9"}],"Tag":[{"name":"blog","_id":"cjkqk7qgg000478b3fi3klrwt"},{"name":"jvm","_id":"cjkqk7qgw000l78b3ivv6hqhg"},{"name":"java8","_id":"cjkqk7qgz000r78b3nco6lfub"},{"name":"设计模式","_id":"cjkqk7qh6001a78b36zuhanud"}]}}